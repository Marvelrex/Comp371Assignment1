/*Part codes from Lab3 and Lab5 Concordia University Comp 371
* Name:Jialin Yang ID:40069006
* User Documentation:
* Model:YANGJI (YANG is last name, and JI was borrowed from first name. )
* User can use 1-8 to bind each model, and camera will be put in front of model. When model is binded
* User can move(by UP DOWN LEFT RIGHT ARROW KEY) rotate(SHIFT + A/D) zoom(U and J). 
* Changed render type by T(GL_TRIANGLES), L(GL_LINES),P(GL_POINTS)
* Additionlly
* I added two new function.
* 1.User can press I to toggle on groupModel, the whole model can move, rotate, and zoom together.
* 2.If user bind to one model, user can press O to make model rotate around origin and press Y || bind other model to stop it.
* 3.To be more interesting, I added two U models to model's left and right side. User can rotate them around the model tower, move and scale(Same operation as other model).
*/

#include <iostream>


// This allows linking with Static Library on Windows, without DLL
#include <GL/glew.h>    // Include GLEW - OpenGL Extension Wrangler

#include <GLFW/glfw3.h> // cross-platform interface for creating a graphical context,
// initializing OpenGL and binding inputs

#include <glm/glm.hpp>  // GLM is an optimized math library with syntax to similar to OpenGL Shading Language
#include <glm/gtc/matrix_transform.hpp> // include this to create transformation matrices
#include <glm/common.hpp>
#include <glm/gtc/type_ptr.hpp>

using namespace glm;
using namespace std;

void key_callback(GLFWwindow* window, int key, int scancode, int action, int mode);
void mouse_callback(GLFWwindow* window, double xpos, double ypos);
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset);
void do_movement();


//VertexShdaer, recorded the how vertices are loaded. Matrix from local -> world -> view -> clip -> screen space.
const char* getVertexShaderSource()
{

    return
        "#version 330 core\n"
        "layout (location = 0) in vec3 aPos;"
        "layout (location = 1) in vec3 aColor;"
        "uniform mat4 orientationMatrix = mat4(1.0);"
        "uniform mat4 worldMatrix;"
        "uniform mat4 viewMatrix = mat4(1.0);"  // default value for view matrix (identity)
        "uniform mat4 projectionMatrix = mat4(1.0);"
        "out vec3 vertexColor;"
        "void main()"
        "{"
        "   vertexColor = aColor;"
        "   mat4 modelViewProjection = projectionMatrix * viewMatrix *orientationMatrix * worldMatrix  ;"
        "   gl_Position = modelViewProjection * vec4(aPos.x, aPos.y, aPos.z, 1.0);"
        "}";
}

//FragmentShader receive the out color and transform it to vec4.
const char* getFragmentShaderSource()
{
    return
        "#version 330 core\n"
        "in vec3 vertexColor;"
        "out vec4 FragColor;"
        "uniform vec3 objectColor;"
        "void main()"
        "{"
        "   FragColor = vec4(vertexColor.r * objectColor.r,vertexColor.g * objectColor.g ,vertexColor.b * objectColor.b  , 1.0f);"
        "}";
}

int compileAndLinkShaders()
{
    // compile and link shader program
    // return shader program id
    // ------------------------------------

    // vertex shader
    int vertexShader = glCreateShader(GL_VERTEX_SHADER);
    const char* vertexShaderSource = getVertexShaderSource();
    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
    glCompileShader(vertexShader);

    // check for shader compile errors
    int success;
    char infoLog[512];
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
        std::cerr << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
    }

    // fragment shader
    int fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    const char* fragmentShaderSource = getFragmentShaderSource();
    glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
    glCompileShader(fragmentShader);

    // check for shader compile errors
    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);
        std::cerr << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n" << infoLog << std::endl;
    }

    // link shaders
    int shaderProgram = glCreateProgram();
    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);
    glLinkProgram(shaderProgram);

    // check for linking errors
    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
    if (!success) {
        glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);
        std::cerr << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
    }

    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    return shaderProgram;
}
struct vertex
{
    vertex(vec3 _position, vec3 _color, vec2 _uv)
        : position(_position), color(_color), uv(_uv) {}

    vec3 position;
    vec3 color;
    vec2 uv;
};

const vertex VertexArray[] = {
        // position,					color						grid 

        vertex(vec3(0.0f, 0.0f, 0.0f), vec3(1.0f, 1.0f, 0.0f),vec2(0.0f, 0.0f)), // yellow
        vertex(vec3(1.0f, 0.0f, 0.0f), vec3(1.0f, 1.0f, 0.0f),vec2(0.0f, 0.0f)),
        vertex(vec3(1.0f, 0.0f, 1.0f), vec3(1.0f, 1.0f, 0.0f),vec2(0.0f, 0.0f)),
        vertex(vec3(0.0f, 0.0f, 1.0f), vec3(1.0f, 1.0f, 0.0f),vec2(0.0f, 0.0f)),
        // coordinate axis
        vertex(vec3(0.0f, 0.0f, 0.0f), vec3(0.0f, 1.0f, 0.0f),vec2(0.0f, 0.0f)),  // green +Y
        vertex(vec3(0.0f, 1.0f, 0.0f), vec3(0.0f, 1.0f, 0.0f),vec2(0.0f, 0.0f)),

        vertex(vec3(0.0f, 0.0f, 0.0f), vec3(1.0f, 0.0f, 0.0f),vec2(0.0f, 0.0f)), // red +X
        vertex(vec3(1.0f, 0.0f, 0.0f), vec3(1.0f, 0.0f, 0.0f),vec2(0.0f, 0.0f)),

        vertex(vec3(0.0f, 0.0f, 0.0f), vec3(0.0f, 0.0f, 1.0f),vec2(0.0f, 0.0f)), // blue +Z
        vertex(vec3(0.0f, 0.0f, 1.0f), vec3(0.0f, 0.0f, 1.0f),vec2(0.0f, 0.0f)),


        //model
        vertex(vec3(-0.5f,-0.5f,-0.5f),vec3(0.5f,0.5f,0.5f) , vec2(0.0f, 0.0f)), //left - red
        vertex(vec3(-0.5f,-0.5f, 0.5f),vec3(0.5f,0.5f,0.5f) , vec2(0.0f, 1.0f)),
        vertex(vec3(-0.5f, 0.5f, 0.5f),vec3(0.5f,0.5f,0.5f) , vec2(1.0f, 1.0f)),
                                   
        vertex(vec3(-0.5f,-0.5f,-0.5f),vec3(0.5f,0.5f,0.5f) , vec2(0.0f, 0.0f)),
        vertex(vec3(-0.5f, 0.5f, 0.5f),vec3(0.5f,0.5f,0.5f) , vec2(1.0f, 1.0f)),
        vertex(vec3(-0.5f, 0.5f,-0.5f),vec3(0.5f,0.5f,0.5f) , vec2(1.0f, 0.0f)),
                                 
        vertex(vec3(0.5f, 0.5f,-0.5f), vec3(0.5f,0.5f,0.5f) ,vec2(1.0f, 1.0f)), // far - blue
        vertex(vec3(-0.5f,-0.5f,-0.5f),vec3(0.5f,0.5f,0.5f) , vec2(0.0f, 0.0f)),
        vertex(vec3(-0.5f, 0.5f,-0.5f),vec3(0.5f,0.5f,0.5f) , vec2(0.0f, 1.0f)),
                                      
        vertex(vec3(0.5f, 0.5f,-0.5f), vec3(0.5f,0.5f,0.5f) ,vec2(1.0f, 1.0f)),
        vertex(vec3(0.5f,-0.5f,-0.5f), vec3(0.5f,0.5f,0.5f) ,vec2(1.0f, 0.0f)),
        vertex(vec3(-0.5f,-0.5f,-0.5f),vec3(0.5f,0.5f,0.5f) , vec2(0.0f, 0.0f)),
                                  
        vertex(vec3(0.5f,-0.5f, 0.5f), vec3(0.5f,0.5f,0.5f) ,vec2(1.0f, 1.0f)), // bottom - turquoise
        vertex(vec3(-0.5f,-0.5f,-0.5f),vec3(0.5f,0.5f,0.5f) , vec2(0.0f, 0.0f)),
        vertex(vec3(0.5f,-0.5f,-0.5f), vec3(0.5f,0.5f,0.5f) ,vec2(1.0f, 0.0f)),
                                    
        vertex(vec3(0.5f,-0.5f, 0.5f), vec3(0.5f,0.5f,0.5f) ,vec2(1.0f, 1.0f)),
        vertex(vec3(-0.5f,-0.5f, 0.5f),vec3(0.5f,0.5f,0.5f) , vec2(0.0f, 1.0f)),
        vertex(vec3(-0.5f,-0.5f,-0.5f),vec3(0.5f,0.5f,0.5f) , vec2(0.0f, 0.0f)),
                                  
        vertex(vec3(-0.5f, 0.5f, 0.5f),vec3(0.5f,0.5f,0.5f) , vec2(0.0f, 1.0f)), // near - green
        vertex(vec3(-0.5f,-0.5f, 0.5f),vec3(0.5f,0.5f,0.5f) , vec2(0.0f, 0.0f)),
        vertex(vec3(0.5f,-0.5f, 0.5f), vec3(0.5f,0.5f,0.5f) ,vec2(1.0f, 0.0f)),
                                    
        vertex(vec3(0.5f, 0.5f, 0.5f), vec3(0.5f,0.5f,0.5f) ,vec2(1.0f, 1.0f)),
        vertex(vec3(-0.5f, 0.5f, 0.5f),vec3(0.5f,0.5f,0.5f) , vec2(0.0f, 1.0f)),
        vertex(vec3(0.5f,-0.5f, 0.5f), vec3(0.5f,0.5f,0.5f) ,vec2(1.0f, 0.0f)),
                                    
        vertex(vec3(0.5f, 0.5f, 0.5f), vec3(0.5f,0.5f,0.5f) ,vec2(1.0f, 1.0f)), // right - purple
        vertex(vec3(0.5f,-0.5f,-0.5f), vec3(0.5f,0.5f,0.5f) ,vec2(0.0f, 0.0f)),
        vertex(vec3(0.5f, 0.5f,-0.5f), vec3(0.5f,0.5f,0.5f) ,vec2(1.0f, 0.0f)),
                                      
        vertex(vec3(0.5f,-0.5f,-0.5f), vec3(0.5f,0.5f,0.5f) ,vec2(0.0f, 0.0f)),
        vertex(vec3(0.5f, 0.5f, 0.5f), vec3(0.5f,0.5f,0.5f) ,vec2(1.0f, 1.0f)),
        vertex(vec3(0.5f,-0.5f, 0.5f), vec3(0.5f,0.5f,0.5f) ,vec2(0.0f, 1.0f)),
                                     
        vertex(vec3(0.5f, 0.5f, 0.5f), vec3(0.5f,0.5f,0.5f) ,vec2(1.0f, 1.0f)), // top - yellow
        vertex(vec3(0.5f, 0.5f,-0.5f), vec3(0.5f,0.5f,0.5f) ,vec2(1.0f, 0.0f)),
        vertex(vec3(-0.5f, 0.5f,-0.5f),vec3(0.5f,0.5f,0.5f) , vec2(0.0f, 0.0f)),
                                      
        vertex(vec3(0.5f, 0.5f, 0.5f), vec3(0.5f,0.5f,0.5f) ,vec2(1.0f, 1.0f)),
        vertex(vec3(-0.5f, 0.5f,-0.5f),vec3(0.5f,0.5f,0.5f) , vec2(0.0f, 0.0f)),
        vertex(vec3(-0.5f, 0.5f, 0.5f),vec3(0.5f,0.5f,0.5f) , vec2(0.0f, 1.0f)),
        
//sphere
// position,                                    normal,                              color
      { vec3(0.000000, 0.000000, -1.000000), vec3(0.000000, 0.000000, -1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.173648, 0.000000, -0.984808), vec3(0.173648, 0.000000, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, 0.030154, -0.984808), vec3(0.171010, 0.030154, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.342020, 0.000000, -0.939693), vec3(0.342020, 0.000000, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.336824, 0.059391, -0.939693), vec3(0.336824, 0.059391, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.500000, 0.000000, -0.866025), vec3(0.500000, 0.000000, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, 0.086824, -0.866025), vec3(0.492404, 0.086824, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.642788, 0.000000, -0.766044), vec3(0.642788, 0.000000, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.633022, 0.111619, -0.766044), vec3(0.633022, 0.111619, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.766044, 0.000000, -0.642788), vec3(0.766044, 0.000000, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.754407, 0.133022, -0.642788), vec3(0.754407, 0.133022, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.866025, 0.000000, -0.500000), vec3(0.866025, 0.000000, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.852869, 0.150384, -0.500000), vec3(0.852869, 0.150384, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.939693, 0.000000, -0.342020), vec3(0.939693, 0.000000, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.925417, 0.163176, -0.342020), vec3(0.925417, 0.163176, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.984808, 0.000000, -0.173648), vec3(0.984808, 0.000000, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.969846, 0.171010, -0.173648), vec3(0.969846, 0.171010, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(1.000000, 0.000000, 0.000000), vec3(1.000000, 0.000000, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.984808, 0.173648, 0.000000), vec3(0.984808, 0.173648, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.984808, 0.000000, 0.173648), vec3(0.984808, 0.000000, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.969846, 0.171010, 0.173648), vec3(0.969846, 0.171010, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.939693, 0.000000, 0.342020), vec3(0.939693, 0.000000, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.925417, 0.163176, 0.342020), vec3(0.925417, 0.163176, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.866025, 0.000000, 0.500000), vec3(0.866025, 0.000000, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.852869, 0.150384, 0.500000), vec3(0.852869, 0.150384, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.766044, 0.000000, 0.642788), vec3(0.766044, 0.000000, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.754407, 0.133022, 0.642788), vec3(0.754407, 0.133022, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.642788, 0.000000, 0.766044), vec3(0.642788, 0.000000, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.633022, 0.111619, 0.766044), vec3(0.633022, 0.111619, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.500000, 0.000000, 0.866025), vec3(0.500000, 0.000000, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, 0.086824, 0.866025), vec3(0.492404, 0.086824, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.342020, 0.000000, 0.939693), vec3(0.342020, 0.000000, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.336824, 0.059391, 0.939693), vec3(0.336824, 0.059391, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.173648, 0.000000, 0.984808), vec3(0.173648, 0.000000, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, 0.030154, 0.984808), vec3(0.171010, 0.030154, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, 1.000000), vec3(0.000000, 0.000000, 1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, 0.030154, 0.984808), vec3(0.171010, 0.030154, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.163176, 0.059391, 0.984808), vec3(0.163176, 0.059391, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.336824, 0.059391, 0.939693), vec3(0.336824, 0.059391, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, 0.116978, 0.939693), vec3(0.321394, 0.116978, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, 0.086824, 0.866025), vec3(0.492404, 0.086824, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.469846, 0.171010, 0.866025), vec3(0.469846, 0.171010, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.633022, 0.111619, 0.766044), vec3(0.633022, 0.111619, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.604023, 0.219846, 0.766044), vec3(0.604023, 0.219846, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.754407, 0.133022, 0.642788), vec3(0.754407, 0.133022, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.719846, 0.262003, 0.642788), vec3(0.719846, 0.262003, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.852869, 0.150384, 0.500000), vec3(0.852869, 0.150384, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.813798, 0.296198, 0.500000), vec3(0.813798, 0.296198, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.925417, 0.163176, 0.342020), vec3(0.925417, 0.163176, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.883022, 0.321394, 0.342020), vec3(0.883022, 0.321394, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.969846, 0.171010, 0.173648), vec3(0.969846, 0.171010, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.925417, 0.336824, 0.173648), vec3(0.925417, 0.336824, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.984808, 0.173648, 0.000000), vec3(0.984808, 0.173648, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.939693, 0.342020, 0.000000), vec3(0.939693, 0.342020, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.969846, 0.171010, -0.173648), vec3(0.969846, 0.171010, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.925417, 0.336824, -0.173648), vec3(0.925417, 0.336824, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.925417, 0.163176, -0.342020), vec3(0.925417, 0.163176, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.883022, 0.321394, -0.342020), vec3(0.883022, 0.321394, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.852869, 0.150384, -0.500000), vec3(0.852869, 0.150384, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.813798, 0.296198, -0.500000), vec3(0.813798, 0.296198, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.754407, 0.133022, -0.642788), vec3(0.754407, 0.133022, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.719846, 0.262003, -0.642788), vec3(0.719846, 0.262003, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.633022, 0.111619, -0.766044), vec3(0.633022, 0.111619, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.604023, 0.219846, -0.766044), vec3(0.604023, 0.219846, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, 0.086824, -0.866025), vec3(0.492404, 0.086824, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.469846, 0.171010, -0.866025), vec3(0.469846, 0.171010, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.336824, 0.059391, -0.939693), vec3(0.336824, 0.059391, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, 0.116978, -0.939693), vec3(0.321394, 0.116978, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, 0.030154, -0.984808), vec3(0.171010, 0.030154, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.163176, 0.059391, -0.984808), vec3(0.163176, 0.059391, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, -1.000000), vec3(0.000000, 0.000000, -1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.163176, 0.059391, -0.984808), vec3(0.163176, 0.059391, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.150384, 0.086824, -0.984808), vec3(0.150384, 0.086824, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, 0.116978, -0.939693), vec3(0.321394, 0.116978, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.296198, 0.171010, -0.939693), vec3(0.296198, 0.171010, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.469846, 0.171010, -0.866025), vec3(0.469846, 0.171010, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.433013, 0.250000, -0.866025), vec3(0.433013, 0.250000, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.604023, 0.219846, -0.766044), vec3(0.604023, 0.219846, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.556670, 0.321394, -0.766044), vec3(0.556670, 0.321394, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.719846, 0.262003, -0.642788), vec3(0.719846, 0.262003, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.663414, 0.383022, -0.642788), vec3(0.663414, 0.383022, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.813798, 0.296198, -0.500000), vec3(0.813798, 0.296198, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.750000, 0.433013, -0.500000), vec3(0.750000, 0.433013, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.883022, 0.321394, -0.342020), vec3(0.883022, 0.321394, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.813798, 0.469846, -0.342020), vec3(0.813798, 0.469846, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.925417, 0.336824, -0.173648), vec3(0.925417, 0.336824, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.852869, 0.492404, -0.173648), vec3(0.852869, 0.492404, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.939693, 0.342020, 0.000000), vec3(0.939693, 0.342020, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.866025, 0.500000, 0.000000), vec3(0.866025, 0.500000, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.925417, 0.336824, 0.173648), vec3(0.925417, 0.336824, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.852869, 0.492404, 0.173648), vec3(0.852869, 0.492404, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.883022, 0.321394, 0.342020), vec3(0.883022, 0.321394, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.813798, 0.469846, 0.342020), vec3(0.813798, 0.469846, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.813798, 0.296198, 0.500000), vec3(0.813798, 0.296198, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.750000, 0.433013, 0.500000), vec3(0.750000, 0.433013, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.719846, 0.262003, 0.642788), vec3(0.719846, 0.262003, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.663414, 0.383022, 0.642788), vec3(0.663414, 0.383022, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.604023, 0.219846, 0.766044), vec3(0.604023, 0.219846, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.556670, 0.321394, 0.766044), vec3(0.556670, 0.321394, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.469846, 0.171010, 0.866025), vec3(0.469846, 0.171010, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.433013, 0.250000, 0.866025), vec3(0.433013, 0.250000, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, 0.116978, 0.939693), vec3(0.321394, 0.116978, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.296198, 0.171010, 0.939693), vec3(0.296198, 0.171010, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.163176, 0.059391, 0.984808), vec3(0.163176, 0.059391, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.150384, 0.086824, 0.984808), vec3(0.150384, 0.086824, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, 1.000000), vec3(0.000000, 0.000000, 1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.150384, 0.086824, 0.984808), vec3(0.150384, 0.086824, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.133022, 0.111619, 0.984808), vec3(0.133022, 0.111619, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.296198, 0.171010, 0.939693), vec3(0.296198, 0.171010, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.262003, 0.219846, 0.939693), vec3(0.262003, 0.219846, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.433013, 0.250000, 0.866025), vec3(0.433013, 0.250000, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.383022, 0.321394, 0.866025), vec3(0.383022, 0.321394, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.556670, 0.321394, 0.766044), vec3(0.556670, 0.321394, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, 0.413176, 0.766044), vec3(0.492404, 0.413176, 0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.663414, 0.383022, 0.642788), vec3(0.663414, 0.383022, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.586824, 0.492404, 0.642788), vec3(0.586824, 0.492404, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.750000, 0.433013, 0.500000), vec3(0.750000, 0.433013, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.663414, 0.556670, 0.500000), vec3(0.663414, 0.556670, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.813798, 0.469846, 0.342020), vec3(0.813798, 0.469846, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.719846, 0.604023, 0.342020), vec3(0.719846, 0.604023, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.852869, 0.492404, 0.173648), vec3(0.852869, 0.492404, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.754407, 0.633022, 0.173648), vec3(0.754407, 0.633022, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.866025, 0.500000, 0.000000), vec3(0.866025, 0.500000, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.766044, 0.642788, 0.000000), vec3(0.766044, 0.642788, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.852869, 0.492404, -0.173648), vec3(0.852869, 0.492404, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.754407, 0.633022, -0.173648), vec3(0.754407, 0.633022, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.813798, 0.469846, -0.342020), vec3(0.813798, 0.469846, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.719846, 0.604023, -0.342020), vec3(0.719846, 0.604023, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.750000, 0.433013, -0.500000), vec3(0.750000, 0.433013, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.663414, 0.556670, -0.500000), vec3(0.663414, 0.556670, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.663414, 0.383022, -0.642788), vec3(0.663414, 0.383022, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.586824, 0.492404, -0.642788), vec3(0.586824, 0.492404, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.556670, 0.321394, -0.766044), vec3(0.556670, 0.321394, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, 0.413176, -0.766044), vec3(0.492404, 0.413176, -0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.433013, 0.250000, -0.866025), vec3(0.433013, 0.250000, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.383022, 0.321394, -0.866025), vec3(0.383022, 0.321394, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.296198, 0.171010, -0.939693), vec3(0.296198, 0.171010, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.262003, 0.219846, -0.939693), vec3(0.262003, 0.219846, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.150384, 0.086824, -0.984808), vec3(0.150384, 0.086824, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.133022, 0.111619, -0.984808), vec3(0.133022, 0.111619, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, -1.000000), vec3(0.000000, 0.000000, -1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.133022, 0.111619, -0.984808), vec3(0.133022, 0.111619, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.111619, 0.133022, -0.984808), vec3(0.111619, 0.133022, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.262003, 0.219846, -0.939693), vec3(0.262003, 0.219846, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.219846, 0.262003, -0.939693), vec3(0.219846, 0.262003, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.383022, 0.321394, -0.866025), vec3(0.383022, 0.321394, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, 0.383022, -0.866025), vec3(0.321394, 0.383022, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, 0.413176, -0.766044), vec3(0.492404, 0.413176, -0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.413176, 0.492404, -0.766044), vec3(0.413176, 0.492404, -0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.586824, 0.492404, -0.642788), vec3(0.586824, 0.492404, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, 0.586824, -0.642788), vec3(0.492404, 0.586824, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.663414, 0.556670, -0.500000), vec3(0.663414, 0.556670, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.556670, 0.663414, -0.500000), vec3(0.556670, 0.663414, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.719846, 0.604023, -0.342020), vec3(0.719846, 0.604023, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.604023, 0.719846, -0.342020), vec3(0.604023, 0.719846, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.754407, 0.633022, -0.173648), vec3(0.754407, 0.633022, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.633022, 0.754407, -0.173648), vec3(0.633022, 0.754407, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.766044, 0.642788, 0.000000), vec3(0.766044, 0.642788, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.642788, 0.766044, 0.000000), vec3(0.642788, 0.766044, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.754407, 0.633022, 0.173648), vec3(0.754407, 0.633022, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.633022, 0.754407, 0.173648), vec3(0.633022, 0.754407, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.719846, 0.604023, 0.342020), vec3(0.719846, 0.604023, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.604023, 0.719846, 0.342020), vec3(0.604023, 0.719846, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.663414, 0.556670, 0.500000), vec3(0.663414, 0.556670, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.556670, 0.663414, 0.500000), vec3(0.556670, 0.663414, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.586824, 0.492404, 0.642788), vec3(0.586824, 0.492404, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, 0.586824, 0.642788), vec3(0.492404, 0.586824, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, 0.413176, 0.766044), vec3(0.492404, 0.413176, 0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.413176, 0.492404, 0.766044), vec3(0.413176, 0.492404, 0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.383022, 0.321394, 0.866025), vec3(0.383022, 0.321394, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, 0.383022, 0.866025), vec3(0.321394, 0.383022, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.262003, 0.219846, 0.939693), vec3(0.262003, 0.219846, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.219846, 0.262003, 0.939693), vec3(0.219846, 0.262003, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.133022, 0.111619, 0.984808), vec3(0.133022, 0.111619, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.111619, 0.133022, 0.984808), vec3(0.111619, 0.133022, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, 1.000000), vec3(0.000000, 0.000000, 1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.111619, 0.133022, 0.984808), vec3(0.111619, 0.133022, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.086824, 0.150384, 0.984808), vec3(0.086824, 0.150384, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.219846, 0.262003, 0.939693), vec3(0.219846, 0.262003, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, 0.296198, 0.939693), vec3(0.171010, 0.296198, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, 0.383022, 0.866025), vec3(0.321394, 0.383022, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.250000, 0.433013, 0.866025), vec3(0.250000, 0.433013, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.413176, 0.492404, 0.766044), vec3(0.413176, 0.492404, 0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, 0.556670, 0.766044), vec3(0.321394, 0.556670, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, 0.586824, 0.642788), vec3(0.492404, 0.586824, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.383022, 0.663414, 0.642788), vec3(0.383022, 0.663414, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.556670, 0.663414, 0.500000), vec3(0.556670, 0.663414, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.433013, 0.750000, 0.500000), vec3(0.433013, 0.750000, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.604023, 0.719846, 0.342020), vec3(0.604023, 0.719846, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.469846, 0.813798, 0.342020), vec3(0.469846, 0.813798, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.633022, 0.754407, 0.173648), vec3(0.633022, 0.754407, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, 0.852869, 0.173648), vec3(0.492404, 0.852869, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.642788, 0.766044, 0.000000), vec3(0.642788, 0.766044, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.500000, 0.866025, 0.000000), vec3(0.500000, 0.866025, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.633022, 0.754407, -0.173648), vec3(0.633022, 0.754407, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, 0.852869, -0.173648), vec3(0.492404, 0.852869, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.604023, 0.719846, -0.342020), vec3(0.604023, 0.719846, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.469846, 0.813798, -0.342020), vec3(0.469846, 0.813798, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.556670, 0.663414, -0.500000), vec3(0.556670, 0.663414, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.433013, 0.750000, -0.500000), vec3(0.433013, 0.750000, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, 0.586824, -0.642788), vec3(0.492404, 0.586824, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.383022, 0.663414, -0.642788), vec3(0.383022, 0.663414, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.413176, 0.492404, -0.766044), vec3(0.413176, 0.492404, -0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, 0.556670, -0.766044), vec3(0.321394, 0.556670, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, 0.383022, -0.866025), vec3(0.321394, 0.383022, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.250000, 0.433013, -0.866025), vec3(0.250000, 0.433013, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.219846, 0.262003, -0.939693), vec3(0.219846, 0.262003, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, 0.296198, -0.939693), vec3(0.171010, 0.296198, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.111619, 0.133022, -0.984808), vec3(0.111619, 0.133022, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.086824, 0.150384, -0.984808), vec3(0.086824, 0.150384, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, -1.000000), vec3(0.000000, 0.000000, -1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.086824, 0.150384, -0.984808), vec3(0.086824, 0.150384, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.059391, 0.163176, -0.984808), vec3(0.059391, 0.163176, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, 0.296198, -0.939693), vec3(0.171010, 0.296198, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.116978, 0.321394, -0.939693), vec3(0.116978, 0.321394, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.250000, 0.433013, -0.866025), vec3(0.250000, 0.433013, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, 0.469846, -0.866025), vec3(0.171010, 0.469846, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, 0.556670, -0.766044), vec3(0.321394, 0.556670, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.219846, 0.604023, -0.766044), vec3(0.219846, 0.604023, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.383022, 0.663414, -0.642788), vec3(0.383022, 0.663414, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.262003, 0.719846, -0.642788), vec3(0.262003, 0.719846, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.433013, 0.750000, -0.500000), vec3(0.433013, 0.750000, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.296198, 0.813798, -0.500000), vec3(0.296198, 0.813798, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.469846, 0.813798, -0.342020), vec3(0.469846, 0.813798, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, 0.883022, -0.342020), vec3(0.321394, 0.883022, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, 0.852869, -0.173648), vec3(0.492404, 0.852869, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.336824, 0.925417, -0.173648), vec3(0.336824, 0.925417, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.500000, 0.866025, 0.000000), vec3(0.500000, 0.866025, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.342020, 0.939693, 0.000000), vec3(0.342020, 0.939693, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, 0.852869, 0.173648), vec3(0.492404, 0.852869, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.336824, 0.925417, 0.173648), vec3(0.336824, 0.925417, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.469846, 0.813798, 0.342020), vec3(0.469846, 0.813798, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, 0.883022, 0.342020), vec3(0.321394, 0.883022, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.433013, 0.750000, 0.500000), vec3(0.433013, 0.750000, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.296198, 0.813798, 0.500000), vec3(0.296198, 0.813798, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.383022, 0.663414, 0.642788), vec3(0.383022, 0.663414, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.262003, 0.719846, 0.642788), vec3(0.262003, 0.719846, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, 0.556670, 0.766044), vec3(0.321394, 0.556670, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.219846, 0.604023, 0.766044), vec3(0.219846, 0.604023, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.250000, 0.433013, 0.866025), vec3(0.250000, 0.433013, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, 0.469846, 0.866025), vec3(0.171010, 0.469846, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, 0.296198, 0.939693), vec3(0.171010, 0.296198, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.116978, 0.321394, 0.939693), vec3(0.116978, 0.321394, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.086824, 0.150384, 0.984808), vec3(0.086824, 0.150384, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.059391, 0.163176, 0.984808), vec3(0.059391, 0.163176, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, 1.000000), vec3(0.000000, 0.000000, 1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.059391, 0.163176, 0.984808), vec3(0.059391, 0.163176, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.030154, 0.171010, 0.984808), vec3(0.030154, 0.171010, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.116978, 0.321394, 0.939693), vec3(0.116978, 0.321394, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.059391, 0.336824, 0.939693), vec3(0.059391, 0.336824, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, 0.469846, 0.866025), vec3(0.171010, 0.469846, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.086824, 0.492404, 0.866025), vec3(0.086824, 0.492404, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.219846, 0.604023, 0.766044), vec3(0.219846, 0.604023, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.111619, 0.633022, 0.766044), vec3(0.111619, 0.633022, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.262003, 0.719846, 0.642788), vec3(0.262003, 0.719846, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.133022, 0.754407, 0.642788), vec3(0.133022, 0.754407, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.296198, 0.813798, 0.500000), vec3(0.296198, 0.813798, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.150384, 0.852869, 0.500000), vec3(0.150384, 0.852869, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, 0.883022, 0.342020), vec3(0.321394, 0.883022, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.163176, 0.925417, 0.342020), vec3(0.163176, 0.925417, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.336824, 0.925417, 0.173648), vec3(0.336824, 0.925417, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, 0.969846, 0.173648), vec3(0.171010, 0.969846, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.342020, 0.939693, 0.000000), vec3(0.342020, 0.939693, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.173648, 0.984808, 0.000000), vec3(0.173648, 0.984808, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.336824, 0.925417, -0.173648), vec3(0.336824, 0.925417, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, 0.969846, -0.173648), vec3(0.171010, 0.969846, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, 0.883022, -0.342020), vec3(0.321394, 0.883022, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.163176, 0.925417, -0.342020), vec3(0.163176, 0.925417, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.296198, 0.813798, -0.500000), vec3(0.296198, 0.813798, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.150384, 0.852869, -0.500000), vec3(0.150384, 0.852869, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.262003, 0.719846, -0.642788), vec3(0.262003, 0.719846, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.133022, 0.754407, -0.642788), vec3(0.133022, 0.754407, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.219846, 0.604023, -0.766044), vec3(0.219846, 0.604023, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.111619, 0.633022, -0.766044), vec3(0.111619, 0.633022, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, 0.469846, -0.866025), vec3(0.171010, 0.469846, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.086824, 0.492404, -0.866025), vec3(0.086824, 0.492404, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.116978, 0.321394, -0.939693), vec3(0.116978, 0.321394, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.059391, 0.336824, -0.939693), vec3(0.059391, 0.336824, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.059391, 0.163176, -0.984808), vec3(0.059391, 0.163176, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.030154, 0.171010, -0.984808), vec3(0.030154, 0.171010, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, -1.000000), vec3(0.000000, 0.000000, -1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.030154, 0.171010, -0.984808), vec3(0.030154, 0.171010, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.173648, -0.984808), vec3(0.000000, 0.173648, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.059391, 0.336824, -0.939693), vec3(0.059391, 0.336824, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.342020, -0.939693), vec3(0.000000, 0.342020, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.086824, 0.492404, -0.866025), vec3(0.086824, 0.492404, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.500000, -0.866025), vec3(0.000000, 0.500000, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.111619, 0.633022, -0.766044), vec3(0.111619, 0.633022, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.642788, -0.766044), vec3(0.000000, 0.642788, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.133022, 0.754407, -0.642788), vec3(0.133022, 0.754407, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.766044, -0.642788), vec3(0.000000, 0.766044, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.150384, 0.852869, -0.500000), vec3(0.150384, 0.852869, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.866025, -0.500000), vec3(0.000000, 0.866025, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.163176, 0.925417, -0.342020), vec3(0.163176, 0.925417, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.939693, -0.342020), vec3(0.000000, 0.939693, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, 0.969846, -0.173648), vec3(0.171010, 0.969846, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.984808, -0.173648), vec3(0.000000, 0.984808, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.173648, 0.984808, 0.000000), vec3(0.173648, 0.984808, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 1.000000, 0.000000), vec3(0.000000, 1.000000, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, 0.969846, 0.173648), vec3(0.171010, 0.969846, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.984808, 0.173648), vec3(0.000000, 0.984808, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.163176, 0.925417, 0.342020), vec3(0.163176, 0.925417, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.939693, 0.342020), vec3(0.000000, 0.939693, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.150384, 0.852869, 0.500000), vec3(0.150384, 0.852869, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.866025, 0.500000), vec3(0.000000, 0.866025, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.133022, 0.754407, 0.642788), vec3(0.133022, 0.754407, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.766044, 0.642788), vec3(0.000000, 0.766044, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.111619, 0.633022, 0.766044), vec3(0.111619, 0.633022, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.642788, 0.766044), vec3(0.000000, 0.642788, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.086824, 0.492404, 0.866025), vec3(0.086824, 0.492404, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.500000, 0.866025), vec3(0.000000, 0.500000, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.059391, 0.336824, 0.939693), vec3(0.059391, 0.336824, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.342020, 0.939693), vec3(0.000000, 0.342020, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.030154, 0.171010, 0.984808), vec3(0.030154, 0.171010, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.173648, 0.984808), vec3(0.000000, 0.173648, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, 1.000000), vec3(0.000000, 0.000000, 1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.173648, 0.984808), vec3(0.000000, 0.173648, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.030154, 0.171010, 0.984808), vec3(-0.030154, 0.171010, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.342020, 0.939693), vec3(0.000000, 0.342020, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.059391, 0.336824, 0.939693), vec3(-0.059391, 0.336824, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.500000, 0.866025), vec3(0.000000, 0.500000, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.086824, 0.492404, 0.866025), vec3(-0.086824, 0.492404, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.642788, 0.766044), vec3(0.000000, 0.642788, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.111619, 0.633022, 0.766044), vec3(-0.111619, 0.633022, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.766044, 0.642788), vec3(0.000000, 0.766044, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.133022, 0.754407, 0.642788), vec3(-0.133022, 0.754407, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.866025, 0.500000), vec3(0.000000, 0.866025, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.150384, 0.852869, 0.500000), vec3(-0.150384, 0.852869, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.939693, 0.342020), vec3(0.000000, 0.939693, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.163176, 0.925417, 0.342020), vec3(-0.163176, 0.925417, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.984808, 0.173648), vec3(0.000000, 0.984808, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, 0.969846, 0.173648), vec3(-0.171010, 0.969846, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 1.000000, 0.000000), vec3(0.000000, 1.000000, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.173648, 0.984808, 0.000000), vec3(-0.173648, 0.984808, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.984808, -0.173648), vec3(0.000000, 0.984808, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, 0.969846, -0.173648), vec3(-0.171010, 0.969846, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.939693, -0.342020), vec3(0.000000, 0.939693, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.163176, 0.925417, -0.342020), vec3(-0.163176, 0.925417, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.866025, -0.500000), vec3(0.000000, 0.866025, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.150384, 0.852869, -0.500000), vec3(-0.150384, 0.852869, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.766044, -0.642788), vec3(0.000000, 0.766044, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.133022, 0.754407, -0.642788), vec3(-0.133022, 0.754407, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.642788, -0.766044), vec3(0.000000, 0.642788, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.111619, 0.633022, -0.766044), vec3(-0.111619, 0.633022, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.500000, -0.866025), vec3(0.000000, 0.500000, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.086824, 0.492404, -0.866025), vec3(-0.086824, 0.492404, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.342020, -0.939693), vec3(0.000000, 0.342020, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.059391, 0.336824, -0.939693), vec3(-0.059391, 0.336824, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.173648, -0.984808), vec3(0.000000, 0.173648, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.030154, 0.171010, -0.984808), vec3(-0.030154, 0.171010, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, -1.000000), vec3(0.000000, 0.000000, -1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.030154, 0.171010, -0.984808), vec3(-0.030154, 0.171010, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.059391, 0.163176, -0.984808), vec3(-0.059391, 0.163176, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.059391, 0.336824, -0.939693), vec3(-0.059391, 0.336824, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.116978, 0.321394, -0.939693), vec3(-0.116978, 0.321394, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.086824, 0.492404, -0.866025), vec3(-0.086824, 0.492404, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, 0.469846, -0.866025), vec3(-0.171010, 0.469846, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.111619, 0.633022, -0.766044), vec3(-0.111619, 0.633022, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.219846, 0.604023, -0.766044), vec3(-0.219846, 0.604023, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.133022, 0.754407, -0.642788), vec3(-0.133022, 0.754407, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.262003, 0.719846, -0.642788), vec3(-0.262003, 0.719846, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.150384, 0.852869, -0.500000), vec3(-0.150384, 0.852869, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.296198, 0.813798, -0.500000), vec3(-0.296198, 0.813798, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.163176, 0.925417, -0.342020), vec3(-0.163176, 0.925417, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, 0.883022, -0.342020), vec3(-0.321394, 0.883022, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, 0.969846, -0.173648), vec3(-0.171010, 0.969846, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.336824, 0.925417, -0.173648), vec3(-0.336824, 0.925417, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.173648, 0.984808, 0.000000), vec3(-0.173648, 0.984808, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.342020, 0.939693, 0.000000), vec3(-0.342020, 0.939693, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, 0.969846, 0.173648), vec3(-0.171010, 0.969846, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.336824, 0.925417, 0.173648), vec3(-0.336824, 0.925417, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.163176, 0.925417, 0.342020), vec3(-0.163176, 0.925417, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, 0.883022, 0.342020), vec3(-0.321394, 0.883022, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.150384, 0.852869, 0.500000), vec3(-0.150384, 0.852869, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.296198, 0.813798, 0.500000), vec3(-0.296198, 0.813798, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.133022, 0.754407, 0.642788), vec3(-0.133022, 0.754407, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.262003, 0.719846, 0.642788), vec3(-0.262003, 0.719846, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.111619, 0.633022, 0.766044), vec3(-0.111619, 0.633022, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.219846, 0.604023, 0.766044), vec3(-0.219846, 0.604023, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.086824, 0.492404, 0.866025), vec3(-0.086824, 0.492404, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, 0.469846, 0.866025), vec3(-0.171010, 0.469846, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.059391, 0.336824, 0.939693), vec3(-0.059391, 0.336824, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.116978, 0.321394, 0.939693), vec3(-0.116978, 0.321394, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.030154, 0.171010, 0.984808), vec3(-0.030154, 0.171010, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.059391, 0.163176, 0.984808), vec3(-0.059391, 0.163176, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, 1.000000), vec3(0.000000, 0.000000, 1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.059391, 0.163176, 0.984808), vec3(-0.059391, 0.163176, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.086824, 0.150384, 0.984808), vec3(-0.086824, 0.150384, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.116978, 0.321394, 0.939693), vec3(-0.116978, 0.321394, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, 0.296198, 0.939693), vec3(-0.171010, 0.296198, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, 0.469846, 0.866025), vec3(-0.171010, 0.469846, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.250000, 0.433013, 0.866025), vec3(-0.250000, 0.433013, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.219846, 0.604023, 0.766044), vec3(-0.219846, 0.604023, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, 0.556670, 0.766044), vec3(-0.321394, 0.556670, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.262003, 0.719846, 0.642788), vec3(-0.262003, 0.719846, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.383022, 0.663414, 0.642788), vec3(-0.383022, 0.663414, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.296198, 0.813798, 0.500000), vec3(-0.296198, 0.813798, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.433013, 0.750000, 0.500000), vec3(-0.433013, 0.750000, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, 0.883022, 0.342020), vec3(-0.321394, 0.883022, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.469846, 0.813798, 0.342020), vec3(-0.469846, 0.813798, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.336824, 0.925417, 0.173648), vec3(-0.336824, 0.925417, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, 0.852869, 0.173648), vec3(-0.492404, 0.852869, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.342020, 0.939693, 0.000000), vec3(-0.342020, 0.939693, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.500000, 0.866025, 0.000000), vec3(-0.500000, 0.866025, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.336824, 0.925417, -0.173648), vec3(-0.336824, 0.925417, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, 0.852869, -0.173648), vec3(-0.492404, 0.852869, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, 0.883022, -0.342020), vec3(-0.321394, 0.883022, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.469846, 0.813798, -0.342020), vec3(-0.469846, 0.813798, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.296198, 0.813798, -0.500000), vec3(-0.296198, 0.813798, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.433013, 0.750000, -0.500000), vec3(-0.433013, 0.750000, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.262003, 0.719846, -0.642788), vec3(-0.262003, 0.719846, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.383022, 0.663414, -0.642788), vec3(-0.383022, 0.663414, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.219846, 0.604023, -0.766044), vec3(-0.219846, 0.604023, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, 0.556670, -0.766044), vec3(-0.321394, 0.556670, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, 0.469846, -0.866025), vec3(-0.171010, 0.469846, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.250000, 0.433013, -0.866025), vec3(-0.250000, 0.433013, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.116978, 0.321394, -0.939693), vec3(-0.116978, 0.321394, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, 0.296198, -0.939693), vec3(-0.171010, 0.296198, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.059391, 0.163176, -0.984808), vec3(-0.059391, 0.163176, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.086824, 0.150384, -0.984808), vec3(-0.086824, 0.150384, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, -1.000000), vec3(0.000000, 0.000000, -1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.086824, 0.150384, -0.984808), vec3(-0.086824, 0.150384, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.111619, 0.133022, -0.984808), vec3(-0.111619, 0.133022, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, 0.296198, -0.939693), vec3(-0.171010, 0.296198, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.219846, 0.262003, -0.939693), vec3(-0.219846, 0.262003, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.250000, 0.433013, -0.866025), vec3(-0.250000, 0.433013, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, 0.383022, -0.866025), vec3(-0.321394, 0.383022, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, 0.556670, -0.766044), vec3(-0.321394, 0.556670, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.413176, 0.492404, -0.766044), vec3(-0.413176, 0.492404, -0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.383022, 0.663414, -0.642788), vec3(-0.383022, 0.663414, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, 0.586824, -0.642788), vec3(-0.492404, 0.586824, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.433013, 0.750000, -0.500000), vec3(-0.433013, 0.750000, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.556670, 0.663414, -0.500000), vec3(-0.556670, 0.663414, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.469846, 0.813798, -0.342020), vec3(-0.469846, 0.813798, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.604023, 0.719846, -0.342020), vec3(-0.604023, 0.719846, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, 0.852869, -0.173648), vec3(-0.492404, 0.852869, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.633022, 0.754407, -0.173648), vec3(-0.633022, 0.754407, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.500000, 0.866025, 0.000000), vec3(-0.500000, 0.866025, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.642788, 0.766044, 0.000000), vec3(-0.642788, 0.766044, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, 0.852869, 0.173648), vec3(-0.492404, 0.852869, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.633022, 0.754407, 0.173648), vec3(-0.633022, 0.754407, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.469846, 0.813798, 0.342020), vec3(-0.469846, 0.813798, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.604023, 0.719846, 0.342020), vec3(-0.604023, 0.719846, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.433013, 0.750000, 0.500000), vec3(-0.433013, 0.750000, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.556670, 0.663414, 0.500000), vec3(-0.556670, 0.663414, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.383022, 0.663414, 0.642788), vec3(-0.383022, 0.663414, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, 0.586824, 0.642788), vec3(-0.492404, 0.586824, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, 0.556670, 0.766044), vec3(-0.321394, 0.556670, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.413176, 0.492404, 0.766044), vec3(-0.413176, 0.492404, 0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.250000, 0.433013, 0.866025), vec3(-0.250000, 0.433013, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, 0.383022, 0.866025), vec3(-0.321394, 0.383022, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, 0.296198, 0.939693), vec3(-0.171010, 0.296198, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.219846, 0.262003, 0.939693), vec3(-0.219846, 0.262003, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.086824, 0.150384, 0.984808), vec3(-0.086824, 0.150384, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.111619, 0.133022, 0.984808), vec3(-0.111619, 0.133022, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, 1.000000), vec3(0.000000, 0.000000, 1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.111619, 0.133022, 0.984808), vec3(-0.111619, 0.133022, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.133022, 0.111619, 0.984808), vec3(-0.133022, 0.111619, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.219846, 0.262003, 0.939693), vec3(-0.219846, 0.262003, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.262003, 0.219846, 0.939693), vec3(-0.262003, 0.219846, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, 0.383022, 0.866025), vec3(-0.321394, 0.383022, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.383022, 0.321394, 0.866025), vec3(-0.383022, 0.321394, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.413176, 0.492404, 0.766044), vec3(-0.413176, 0.492404, 0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, 0.413176, 0.766044), vec3(-0.492404, 0.413176, 0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, 0.586824, 0.642788), vec3(-0.492404, 0.586824, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.586824, 0.492404, 0.642788), vec3(-0.586824, 0.492404, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.556670, 0.663414, 0.500000), vec3(-0.556670, 0.663414, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.663414, 0.556670, 0.500000), vec3(-0.663414, 0.556670, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.604023, 0.719846, 0.342020), vec3(-0.604023, 0.719846, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.719846, 0.604023, 0.342020), vec3(-0.719846, 0.604023, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.633022, 0.754407, 0.173648), vec3(-0.633022, 0.754407, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.754407, 0.633022, 0.173648), vec3(-0.754407, 0.633022, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.642788, 0.766044, 0.000000), vec3(-0.642788, 0.766044, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.766044, 0.642788, 0.000000), vec3(-0.766044, 0.642788, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.633022, 0.754407, -0.173648), vec3(-0.633022, 0.754407, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.754407, 0.633022, -0.173648), vec3(-0.754407, 0.633022, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.604023, 0.719846, -0.342020), vec3(-0.604023, 0.719846, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.719846, 0.604023, -0.342020), vec3(-0.719846, 0.604023, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.556670, 0.663414, -0.500000), vec3(-0.556670, 0.663414, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.663414, 0.556670, -0.500000), vec3(-0.663414, 0.556670, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, 0.586824, -0.642788), vec3(-0.492404, 0.586824, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.586824, 0.492404, -0.642788), vec3(-0.586824, 0.492404, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.413176, 0.492404, -0.766044), vec3(-0.413176, 0.492404, -0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, 0.413176, -0.766044), vec3(-0.492404, 0.413176, -0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, 0.383022, -0.866025), vec3(-0.321394, 0.383022, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.383022, 0.321394, -0.866025), vec3(-0.383022, 0.321394, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.219846, 0.262003, -0.939693), vec3(-0.219846, 0.262003, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.262003, 0.219846, -0.939693), vec3(-0.262003, 0.219846, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.111619, 0.133022, -0.984808), vec3(-0.111619, 0.133022, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.133022, 0.111619, -0.984808), vec3(-0.133022, 0.111619, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, -1.000000), vec3(0.000000, 0.000000, -1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.133022, 0.111619, -0.984808), vec3(-0.133022, 0.111619, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.150384, 0.086824, -0.984808), vec3(-0.150384, 0.086824, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.262003, 0.219846, -0.939693), vec3(-0.262003, 0.219846, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.296198, 0.171010, -0.939693), vec3(-0.296198, 0.171010, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.383022, 0.321394, -0.866025), vec3(-0.383022, 0.321394, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.433013, 0.250000, -0.866025), vec3(-0.433013, 0.250000, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, 0.413176, -0.766044), vec3(-0.492404, 0.413176, -0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.556670, 0.321394, -0.766044), vec3(-0.556670, 0.321394, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.586824, 0.492404, -0.642788), vec3(-0.586824, 0.492404, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.663414, 0.383022, -0.642788), vec3(-0.663414, 0.383022, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.663414, 0.556670, -0.500000), vec3(-0.663414, 0.556670, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.750000, 0.433013, -0.500000), vec3(-0.750000, 0.433013, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.719846, 0.604023, -0.342020), vec3(-0.719846, 0.604023, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.813798, 0.469846, -0.342020), vec3(-0.813798, 0.469846, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.754407, 0.633022, -0.173648), vec3(-0.754407, 0.633022, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.852869, 0.492404, -0.173648), vec3(-0.852869, 0.492404, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.766044, 0.642788, 0.000000), vec3(-0.766044, 0.642788, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.866025, 0.500000, 0.000000), vec3(-0.866025, 0.500000, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.754407, 0.633022, 0.173648), vec3(-0.754407, 0.633022, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.852869, 0.492404, 0.173648), vec3(-0.852869, 0.492404, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.719846, 0.604023, 0.342020), vec3(-0.719846, 0.604023, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.813798, 0.469846, 0.342020), vec3(-0.813798, 0.469846, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.663414, 0.556670, 0.500000), vec3(-0.663414, 0.556670, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.750000, 0.433013, 0.500000), vec3(-0.750000, 0.433013, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.586824, 0.492404, 0.642788), vec3(-0.586824, 0.492404, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.663414, 0.383022, 0.642788), vec3(-0.663414, 0.383022, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, 0.413176, 0.766044), vec3(-0.492404, 0.413176, 0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.556670, 0.321394, 0.766044), vec3(-0.556670, 0.321394, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.383022, 0.321394, 0.866025), vec3(-0.383022, 0.321394, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.433013, 0.250000, 0.866025), vec3(-0.433013, 0.250000, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.262003, 0.219846, 0.939693), vec3(-0.262003, 0.219846, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.296198, 0.171010, 0.939693), vec3(-0.296198, 0.171010, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.133022, 0.111619, 0.984808), vec3(-0.133022, 0.111619, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.150384, 0.086824, 0.984808), vec3(-0.150384, 0.086824, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, 1.000000), vec3(0.000000, 0.000000, 1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.150384, 0.086824, 0.984808), vec3(-0.150384, 0.086824, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.163176, 0.059391, 0.984808), vec3(-0.163176, 0.059391, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.296198, 0.171010, 0.939693), vec3(-0.296198, 0.171010, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, 0.116978, 0.939693), vec3(-0.321394, 0.116978, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.433013, 0.250000, 0.866025), vec3(-0.433013, 0.250000, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.469846, 0.171010, 0.866025), vec3(-0.469846, 0.171010, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.556670, 0.321394, 0.766044), vec3(-0.556670, 0.321394, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.604023, 0.219846, 0.766044), vec3(-0.604023, 0.219846, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.663414, 0.383022, 0.642788), vec3(-0.663414, 0.383022, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.719846, 0.262003, 0.642788), vec3(-0.719846, 0.262003, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.750000, 0.433013, 0.500000), vec3(-0.750000, 0.433013, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.813798, 0.296198, 0.500000), vec3(-0.813798, 0.296198, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.813798, 0.469846, 0.342020), vec3(-0.813798, 0.469846, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.883022, 0.321394, 0.342020), vec3(-0.883022, 0.321394, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.852869, 0.492404, 0.173648), vec3(-0.852869, 0.492404, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.925417, 0.336824, 0.173648), vec3(-0.925417, 0.336824, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.866025, 0.500000, 0.000000), vec3(-0.866025, 0.500000, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.939693, 0.342020, 0.000000), vec3(-0.939693, 0.342020, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.852869, 0.492404, -0.173648), vec3(-0.852869, 0.492404, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.925417, 0.336824, -0.173648), vec3(-0.925417, 0.336824, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.813798, 0.469846, -0.342020), vec3(-0.813798, 0.469846, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.883022, 0.321394, -0.342020), vec3(-0.883022, 0.321394, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.750000, 0.433013, -0.500000), vec3(-0.750000, 0.433013, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.813798, 0.296198, -0.500000), vec3(-0.813798, 0.296198, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.663414, 0.383022, -0.642788), vec3(-0.663414, 0.383022, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.719846, 0.262003, -0.642788), vec3(-0.719846, 0.262003, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.556670, 0.321394, -0.766044), vec3(-0.556670, 0.321394, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.604023, 0.219846, -0.766044), vec3(-0.604023, 0.219846, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.433013, 0.250000, -0.866025), vec3(-0.433013, 0.250000, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.469846, 0.171010, -0.866025), vec3(-0.469846, 0.171010, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.296198, 0.171010, -0.939693), vec3(-0.296198, 0.171010, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, 0.116978, -0.939693), vec3(-0.321394, 0.116978, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.150384, 0.086824, -0.984808), vec3(-0.150384, 0.086824, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.163176, 0.059391, -0.984808), vec3(-0.163176, 0.059391, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, -1.000000), vec3(0.000000, 0.000000, -1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.163176, 0.059391, -0.984808), vec3(-0.163176, 0.059391, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, 0.030154, -0.984808), vec3(-0.171010, 0.030154, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, 0.116978, -0.939693), vec3(-0.321394, 0.116978, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.336824, 0.059391, -0.939693), vec3(-0.336824, 0.059391, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.469846, 0.171010, -0.866025), vec3(-0.469846, 0.171010, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, 0.086824, -0.866025), vec3(-0.492404, 0.086824, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.604023, 0.219846, -0.766044), vec3(-0.604023, 0.219846, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.633022, 0.111619, -0.766044), vec3(-0.633022, 0.111619, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.719846, 0.262003, -0.642788), vec3(-0.719846, 0.262003, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.754407, 0.133022, -0.642788), vec3(-0.754407, 0.133022, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.813798, 0.296198, -0.500000), vec3(-0.813798, 0.296198, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.852869, 0.150384, -0.500000), vec3(-0.852869, 0.150384, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.883022, 0.321394, -0.342020), vec3(-0.883022, 0.321394, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.925417, 0.163176, -0.342020), vec3(-0.925417, 0.163176, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.925417, 0.336824, -0.173648), vec3(-0.925417, 0.336824, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.969846, 0.171010, -0.173648), vec3(-0.969846, 0.171010, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.939693, 0.342020, 0.000000), vec3(-0.939693, 0.342020, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.984808, 0.173648, 0.000000), vec3(-0.984808, 0.173648, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.925417, 0.336824, 0.173648), vec3(-0.925417, 0.336824, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.969846, 0.171010, 0.173648), vec3(-0.969846, 0.171010, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.883022, 0.321394, 0.342020), vec3(-0.883022, 0.321394, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.925417, 0.163176, 0.342020), vec3(-0.925417, 0.163176, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.813798, 0.296198, 0.500000), vec3(-0.813798, 0.296198, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.852869, 0.150384, 0.500000), vec3(-0.852869, 0.150384, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.719846, 0.262003, 0.642788), vec3(-0.719846, 0.262003, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.754407, 0.133022, 0.642788), vec3(-0.754407, 0.133022, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.604023, 0.219846, 0.766044), vec3(-0.604023, 0.219846, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.633022, 0.111619, 0.766044), vec3(-0.633022, 0.111619, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.469846, 0.171010, 0.866025), vec3(-0.469846, 0.171010, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, 0.086824, 0.866025), vec3(-0.492404, 0.086824, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, 0.116978, 0.939693), vec3(-0.321394, 0.116978, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.336824, 0.059391, 0.939693), vec3(-0.336824, 0.059391, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.163176, 0.059391, 0.984808), vec3(-0.163176, 0.059391, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, 0.030154, 0.984808), vec3(-0.171010, 0.030154, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, 1.000000), vec3(0.000000, 0.000000, 1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, 0.030154, 0.984808), vec3(-0.171010, 0.030154, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.173648, 0.000000, 0.984808), vec3(-0.173648, 0.000000, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.336824, 0.059391, 0.939693), vec3(-0.336824, 0.059391, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.342020, 0.000000, 0.939693), vec3(-0.342020, 0.000000, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, 0.086824, 0.866025), vec3(-0.492404, 0.086824, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.500000, 0.000000, 0.866025), vec3(-0.500000, 0.000000, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.633022, 0.111619, 0.766044), vec3(-0.633022, 0.111619, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.642788, 0.000000, 0.766044), vec3(-0.642788, 0.000000, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.754407, 0.133022, 0.642788), vec3(-0.754407, 0.133022, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.766044, 0.000000, 0.642788), vec3(-0.766044, 0.000000, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.852869, 0.150384, 0.500000), vec3(-0.852869, 0.150384, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.866025, 0.000000, 0.500000), vec3(-0.866025, 0.000000, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.925417, 0.163176, 0.342020), vec3(-0.925417, 0.163176, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.939693, 0.000000, 0.342020), vec3(-0.939693, 0.000000, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.969846, 0.171010, 0.173648), vec3(-0.969846, 0.171010, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.984808, 0.000000, 0.173648), vec3(-0.984808, 0.000000, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.984808, 0.173648, 0.000000), vec3(-0.984808, 0.173648, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-1.000000, 0.000000, 0.000000), vec3(-1.000000, 0.000000, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.969846, 0.171010, -0.173648), vec3(-0.969846, 0.171010, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.984808, 0.000000, -0.173648), vec3(-0.984808, 0.000000, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.925417, 0.163176, -0.342020), vec3(-0.925417, 0.163176, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.939693, 0.000000, -0.342020), vec3(-0.939693, 0.000000, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.852869, 0.150384, -0.500000), vec3(-0.852869, 0.150384, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.866025, 0.000000, -0.500000), vec3(-0.866025, 0.000000, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.754407, 0.133022, -0.642788), vec3(-0.754407, 0.133022, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.766044, 0.000000, -0.642788), vec3(-0.766044, 0.000000, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.633022, 0.111619, -0.766044), vec3(-0.633022, 0.111619, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.642788, 0.000000, -0.766044), vec3(-0.642788, 0.000000, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, 0.086824, -0.866025), vec3(-0.492404, 0.086824, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.500000, 0.000000, -0.866025), vec3(-0.500000, 0.000000, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.336824, 0.059391, -0.939693), vec3(-0.336824, 0.059391, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.342020, 0.000000, -0.939693), vec3(-0.342020, 0.000000, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, 0.030154, -0.984808), vec3(-0.171010, 0.030154, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.173648, 0.000000, -0.984808), vec3(-0.173648, 0.000000, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, -1.000000), vec3(0.000000, 0.000000, -1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.173648, 0.000000, -0.984808), vec3(-0.173648, 0.000000, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, -0.030154, -0.984808), vec3(-0.171010, -0.030154, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.342020, 0.000000, -0.939693), vec3(-0.342020, 0.000000, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.336824, -0.059391, -0.939693), vec3(-0.336824, -0.059391, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.500000, 0.000000, -0.866025), vec3(-0.500000, 0.000000, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, -0.086824, -0.866025), vec3(-0.492404, -0.086824, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.642788, 0.000000, -0.766044), vec3(-0.642788, 0.000000, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.633022, -0.111619, -0.766044), vec3(-0.633022, -0.111619, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.766044, 0.000000, -0.642788), vec3(-0.766044, 0.000000, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.754407, -0.133022, -0.642788), vec3(-0.754407, -0.133022, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.866025, 0.000000, -0.500000), vec3(-0.866025, 0.000000, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.852869, -0.150384, -0.500000), vec3(-0.852869, -0.150384, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.939693, 0.000000, -0.342020), vec3(-0.939693, 0.000000, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.925417, -0.163176, -0.342020), vec3(-0.925417, -0.163176, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.984808, 0.000000, -0.173648), vec3(-0.984808, 0.000000, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.969846, -0.171010, -0.173648), vec3(-0.969846, -0.171010, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-1.000000, 0.000000, 0.000000), vec3(-1.000000, 0.000000, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.984808, -0.173648, 0.000000), vec3(-0.984808, -0.173648, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.984808, 0.000000, 0.173648), vec3(-0.984808, 0.000000, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.969846, -0.171010, 0.173648), vec3(-0.969846, -0.171010, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.939693, 0.000000, 0.342020), vec3(-0.939693, 0.000000, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.925417, -0.163176, 0.342020), vec3(-0.925417, -0.163176, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.866025, 0.000000, 0.500000), vec3(-0.866025, 0.000000, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.852869, -0.150384, 0.500000), vec3(-0.852869, -0.150384, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.766044, 0.000000, 0.642788), vec3(-0.766044, 0.000000, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.754407, -0.133022, 0.642788), vec3(-0.754407, -0.133022, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.642788, 0.000000, 0.766044), vec3(-0.642788, 0.000000, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.633022, -0.111619, 0.766044), vec3(-0.633022, -0.111619, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.500000, 0.000000, 0.866025), vec3(-0.500000, 0.000000, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, -0.086824, 0.866025), vec3(-0.492404, -0.086824, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.342020, 0.000000, 0.939693), vec3(-0.342020, 0.000000, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.336824, -0.059391, 0.939693), vec3(-0.336824, -0.059391, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.173648, 0.000000, 0.984808), vec3(-0.173648, 0.000000, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, -0.030154, 0.984808), vec3(-0.171010, -0.030154, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, 1.000000), vec3(0.000000, 0.000000, 1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, -0.030154, 0.984808), vec3(-0.171010, -0.030154, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.163176, -0.059391, 0.984808), vec3(-0.163176, -0.059391, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.336824, -0.059391, 0.939693), vec3(-0.336824, -0.059391, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, -0.116978, 0.939693), vec3(-0.321394, -0.116978, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, -0.086824, 0.866025), vec3(-0.492404, -0.086824, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.469846, -0.171010, 0.866025), vec3(-0.469846, -0.171010, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.633022, -0.111619, 0.766044), vec3(-0.633022, -0.111619, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.604023, -0.219846, 0.766044), vec3(-0.604023, -0.219846, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.754407, -0.133022, 0.642788), vec3(-0.754407, -0.133022, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.719846, -0.262003, 0.642788), vec3(-0.719846, -0.262003, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.852869, -0.150384, 0.500000), vec3(-0.852869, -0.150384, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.813798, -0.296198, 0.500000), vec3(-0.813798, -0.296198, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.925417, -0.163176, 0.342020), vec3(-0.925417, -0.163176, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.883022, -0.321394, 0.342020), vec3(-0.883022, -0.321394, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.969846, -0.171010, 0.173648), vec3(-0.969846, -0.171010, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.925417, -0.336824, 0.173648), vec3(-0.925417, -0.336824, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.984808, -0.173648, 0.000000), vec3(-0.984808, -0.173648, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.939693, -0.342020, 0.000000), vec3(-0.939693, -0.342020, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.969846, -0.171010, -0.173648), vec3(-0.969846, -0.171010, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.925417, -0.336824, -0.173648), vec3(-0.925417, -0.336824, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.925417, -0.163176, -0.342020), vec3(-0.925417, -0.163176, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.883022, -0.321394, -0.342020), vec3(-0.883022, -0.321394, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.852869, -0.150384, -0.500000), vec3(-0.852869, -0.150384, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.813798, -0.296198, -0.500000), vec3(-0.813798, -0.296198, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.754407, -0.133022, -0.642788), vec3(-0.754407, -0.133022, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.719846, -0.262003, -0.642788), vec3(-0.719846, -0.262003, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.633022, -0.111619, -0.766044), vec3(-0.633022, -0.111619, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.604023, -0.219846, -0.766044), vec3(-0.604023, -0.219846, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, -0.086824, -0.866025), vec3(-0.492404, -0.086824, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.469846, -0.171010, -0.866025), vec3(-0.469846, -0.171010, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.336824, -0.059391, -0.939693), vec3(-0.336824, -0.059391, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, -0.116978, -0.939693), vec3(-0.321394, -0.116978, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, -0.030154, -0.984808), vec3(-0.171010, -0.030154, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.163176, -0.059391, -0.984808), vec3(-0.163176, -0.059391, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, -1.000000), vec3(0.000000, 0.000000, -1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.163176, -0.059391, -0.984808), vec3(-0.163176, -0.059391, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.150384, -0.086824, -0.984808), vec3(-0.150384, -0.086824, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, -0.116978, -0.939693), vec3(-0.321394, -0.116978, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.296198, -0.171010, -0.939693), vec3(-0.296198, -0.171010, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.469846, -0.171010, -0.866025), vec3(-0.469846, -0.171010, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.433013, -0.250000, -0.866025), vec3(-0.433013, -0.250000, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.604023, -0.219846, -0.766044), vec3(-0.604023, -0.219846, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.556670, -0.321394, -0.766044), vec3(-0.556670, -0.321394, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.719846, -0.262003, -0.642788), vec3(-0.719846, -0.262003, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.663414, -0.383022, -0.642788), vec3(-0.663414, -0.383022, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.813798, -0.296198, -0.500000), vec3(-0.813798, -0.296198, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.750000, -0.433013, -0.500000), vec3(-0.750000, -0.433013, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.883022, -0.321394, -0.342020), vec3(-0.883022, -0.321394, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.813798, -0.469846, -0.342020), vec3(-0.813798, -0.469846, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.925417, -0.336824, -0.173648), vec3(-0.925417, -0.336824, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.852869, -0.492404, -0.173648), vec3(-0.852869, -0.492404, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.939693, -0.342020, 0.000000), vec3(-0.939693, -0.342020, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.866025, -0.500000, 0.000000), vec3(-0.866025, -0.500000, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.925417, -0.336824, 0.173648), vec3(-0.925417, -0.336824, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.852869, -0.492404, 0.173648), vec3(-0.852869, -0.492404, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.883022, -0.321394, 0.342020), vec3(-0.883022, -0.321394, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.813798, -0.469846, 0.342020), vec3(-0.813798, -0.469846, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.813798, -0.296198, 0.500000), vec3(-0.813798, -0.296198, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.750000, -0.433013, 0.500000), vec3(-0.750000, -0.433013, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.719846, -0.262003, 0.642788), vec3(-0.719846, -0.262003, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.663414, -0.383022, 0.642788), vec3(-0.663414, -0.383022, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.604023, -0.219846, 0.766044), vec3(-0.604023, -0.219846, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.556670, -0.321394, 0.766044), vec3(-0.556670, -0.321394, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.469846, -0.171010, 0.866025), vec3(-0.469846, -0.171010, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.433013, -0.250000, 0.866025), vec3(-0.433013, -0.250000, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, -0.116978, 0.939693), vec3(-0.321394, -0.116978, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.296198, -0.171010, 0.939693), vec3(-0.296198, -0.171010, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.163176, -0.059391, 0.984808), vec3(-0.163176, -0.059391, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.150384, -0.086824, 0.984808), vec3(-0.150384, -0.086824, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, 1.000000), vec3(0.000000, 0.000000, 1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.150384, -0.086824, 0.984808), vec3(-0.150384, -0.086824, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.133022, -0.111619, 0.984808), vec3(-0.133022, -0.111619, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.296198, -0.171010, 0.939693), vec3(-0.296198, -0.171010, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.262003, -0.219846, 0.939693), vec3(-0.262003, -0.219846, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.433013, -0.250000, 0.866025), vec3(-0.433013, -0.250000, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.383022, -0.321394, 0.866025), vec3(-0.383022, -0.321394, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.556670, -0.321394, 0.766044), vec3(-0.556670, -0.321394, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, -0.413176, 0.766044), vec3(-0.492404, -0.413176, 0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.663414, -0.383022, 0.642788), vec3(-0.663414, -0.383022, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.586824, -0.492404, 0.642788), vec3(-0.586824, -0.492404, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.750000, -0.433013, 0.500000), vec3(-0.750000, -0.433013, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.663414, -0.556670, 0.500000), vec3(-0.663414, -0.556670, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.813798, -0.469846, 0.342020), vec3(-0.813798, -0.469846, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.719846, -0.604023, 0.342020), vec3(-0.719846, -0.604023, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.852869, -0.492404, 0.173648), vec3(-0.852869, -0.492404, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.754407, -0.633022, 0.173648), vec3(-0.754407, -0.633022, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.866025, -0.500000, 0.000000), vec3(-0.866025, -0.500000, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.766044, -0.642788, 0.000000), vec3(-0.766044, -0.642788, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.852869, -0.492404, -0.173648), vec3(-0.852869, -0.492404, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.754407, -0.633022, -0.173648), vec3(-0.754407, -0.633022, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.813798, -0.469846, -0.342020), vec3(-0.813798, -0.469846, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.719846, -0.604023, -0.342020), vec3(-0.719846, -0.604023, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.750000, -0.433013, -0.500000), vec3(-0.750000, -0.433013, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.663414, -0.556670, -0.500000), vec3(-0.663414, -0.556670, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.663414, -0.383022, -0.642788), vec3(-0.663414, -0.383022, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.586824, -0.492404, -0.642788), vec3(-0.586824, -0.492404, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.556670, -0.321394, -0.766044), vec3(-0.556670, -0.321394, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, -0.413176, -0.766044), vec3(-0.492404, -0.413176, -0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.433013, -0.250000, -0.866025), vec3(-0.433013, -0.250000, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.383022, -0.321394, -0.866025), vec3(-0.383022, -0.321394, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.296198, -0.171010, -0.939693), vec3(-0.296198, -0.171010, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.262003, -0.219846, -0.939693), vec3(-0.262003, -0.219846, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.150384, -0.086824, -0.984808), vec3(-0.150384, -0.086824, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.133022, -0.111619, -0.984808), vec3(-0.133022, -0.111619, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, -1.000000), vec3(0.000000, 0.000000, -1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.133022, -0.111619, -0.984808), vec3(-0.133022, -0.111619, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.111619, -0.133022, -0.984808), vec3(-0.111619, -0.133022, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.262003, -0.219846, -0.939693), vec3(-0.262003, -0.219846, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.219846, -0.262003, -0.939693), vec3(-0.219846, -0.262003, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.383022, -0.321394, -0.866025), vec3(-0.383022, -0.321394, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, -0.383022, -0.866025), vec3(-0.321394, -0.383022, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, -0.413176, -0.766044), vec3(-0.492404, -0.413176, -0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.413176, -0.492404, -0.766044), vec3(-0.413176, -0.492404, -0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.586824, -0.492404, -0.642788), vec3(-0.586824, -0.492404, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, -0.586824, -0.642788), vec3(-0.492404, -0.586824, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.663414, -0.556670, -0.500000), vec3(-0.663414, -0.556670, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.556670, -0.663414, -0.500000), vec3(-0.556670, -0.663414, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.719846, -0.604023, -0.342020), vec3(-0.719846, -0.604023, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.604023, -0.719846, -0.342020), vec3(-0.604023, -0.719846, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.754407, -0.633022, -0.173648), vec3(-0.754407, -0.633022, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.633022, -0.754407, -0.173648), vec3(-0.633022, -0.754407, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.766044, -0.642788, 0.000000), vec3(-0.766044, -0.642788, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.642788, -0.766044, 0.000000), vec3(-0.642788, -0.766044, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.754407, -0.633022, 0.173648), vec3(-0.754407, -0.633022, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.633022, -0.754407, 0.173648), vec3(-0.633022, -0.754407, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.719846, -0.604023, 0.342020), vec3(-0.719846, -0.604023, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.604023, -0.719846, 0.342020), vec3(-0.604023, -0.719846, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.663414, -0.556670, 0.500000), vec3(-0.663414, -0.556670, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.556670, -0.663414, 0.500000), vec3(-0.556670, -0.663414, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.586824, -0.492404, 0.642788), vec3(-0.586824, -0.492404, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, -0.586824, 0.642788), vec3(-0.492404, -0.586824, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, -0.413176, 0.766044), vec3(-0.492404, -0.413176, 0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.413176, -0.492404, 0.766044), vec3(-0.413176, -0.492404, 0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.383022, -0.321394, 0.866025), vec3(-0.383022, -0.321394, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, -0.383022, 0.866025), vec3(-0.321394, -0.383022, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.262003, -0.219846, 0.939693), vec3(-0.262003, -0.219846, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.219846, -0.262003, 0.939693), vec3(-0.219846, -0.262003, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.133022, -0.111619, 0.984808), vec3(-0.133022, -0.111619, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.111619, -0.133022, 0.984808), vec3(-0.111619, -0.133022, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, 1.000000), vec3(0.000000, 0.000000, 1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.111619, -0.133022, 0.984808), vec3(-0.111619, -0.133022, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.086824, -0.150384, 0.984808), vec3(-0.086824, -0.150384, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.219846, -0.262003, 0.939693), vec3(-0.219846, -0.262003, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, -0.296198, 0.939693), vec3(-0.171010, -0.296198, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, -0.383022, 0.866025), vec3(-0.321394, -0.383022, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.250000, -0.433013, 0.866025), vec3(-0.250000, -0.433013, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.413176, -0.492404, 0.766044), vec3(-0.413176, -0.492404, 0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, -0.556670, 0.766044), vec3(-0.321394, -0.556670, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, -0.586824, 0.642788), vec3(-0.492404, -0.586824, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.383022, -0.663414, 0.642788), vec3(-0.383022, -0.663414, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.556670, -0.663414, 0.500000), vec3(-0.556670, -0.663414, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.433013, -0.750000, 0.500000), vec3(-0.433013, -0.750000, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.604023, -0.719846, 0.342020), vec3(-0.604023, -0.719846, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.469846, -0.813798, 0.342020), vec3(-0.469846, -0.813798, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.633022, -0.754407, 0.173648), vec3(-0.633022, -0.754407, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, -0.852869, 0.173648), vec3(-0.492404, -0.852869, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.642788, -0.766044, 0.000000), vec3(-0.642788, -0.766044, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.500000, -0.866025, 0.000000), vec3(-0.500000, -0.866025, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.633022, -0.754407, -0.173648), vec3(-0.633022, -0.754407, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, -0.852869, -0.173648), vec3(-0.492404, -0.852869, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.604023, -0.719846, -0.342020), vec3(-0.604023, -0.719846, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.469846, -0.813798, -0.342020), vec3(-0.469846, -0.813798, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.556670, -0.663414, -0.500000), vec3(-0.556670, -0.663414, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.433013, -0.750000, -0.500000), vec3(-0.433013, -0.750000, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, -0.586824, -0.642788), vec3(-0.492404, -0.586824, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.383022, -0.663414, -0.642788), vec3(-0.383022, -0.663414, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.413176, -0.492404, -0.766044), vec3(-0.413176, -0.492404, -0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, -0.556670, -0.766044), vec3(-0.321394, -0.556670, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, -0.383022, -0.866025), vec3(-0.321394, -0.383022, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.250000, -0.433013, -0.866025), vec3(-0.250000, -0.433013, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.219846, -0.262003, -0.939693), vec3(-0.219846, -0.262003, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, -0.296198, -0.939693), vec3(-0.171010, -0.296198, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.111619, -0.133022, -0.984808), vec3(-0.111619, -0.133022, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.086824, -0.150384, -0.984808), vec3(-0.086824, -0.150384, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, -1.000000), vec3(0.000000, 0.000000, -1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.086824, -0.150384, -0.984808), vec3(-0.086824, -0.150384, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.059391, -0.163176, -0.984808), vec3(-0.059391, -0.163176, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, -0.296198, -0.939693), vec3(-0.171010, -0.296198, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.116978, -0.321394, -0.939693), vec3(-0.116978, -0.321394, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.250000, -0.433013, -0.866025), vec3(-0.250000, -0.433013, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, -0.469846, -0.866025), vec3(-0.171010, -0.469846, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, -0.556670, -0.766044), vec3(-0.321394, -0.556670, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.219846, -0.604023, -0.766044), vec3(-0.219846, -0.604023, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.383022, -0.663414, -0.642788), vec3(-0.383022, -0.663414, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.262003, -0.719846, -0.642788), vec3(-0.262003, -0.719846, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.433013, -0.750000, -0.500000), vec3(-0.433013, -0.750000, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.296198, -0.813798, -0.500000), vec3(-0.296198, -0.813798, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.469846, -0.813798, -0.342020), vec3(-0.469846, -0.813798, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, -0.883022, -0.342020), vec3(-0.321394, -0.883022, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, -0.852869, -0.173648), vec3(-0.492404, -0.852869, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.336824, -0.925417, -0.173648), vec3(-0.336824, -0.925417, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.500000, -0.866025, 0.000000), vec3(-0.500000, -0.866025, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.342020, -0.939693, 0.000000), vec3(-0.342020, -0.939693, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.492404, -0.852869, 0.173648), vec3(-0.492404, -0.852869, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.336824, -0.925417, 0.173648), vec3(-0.336824, -0.925417, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.469846, -0.813798, 0.342020), vec3(-0.469846, -0.813798, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, -0.883022, 0.342020), vec3(-0.321394, -0.883022, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.433013, -0.750000, 0.500000), vec3(-0.433013, -0.750000, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.296198, -0.813798, 0.500000), vec3(-0.296198, -0.813798, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.383022, -0.663414, 0.642788), vec3(-0.383022, -0.663414, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.262003, -0.719846, 0.642788), vec3(-0.262003, -0.719846, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, -0.556670, 0.766044), vec3(-0.321394, -0.556670, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.219846, -0.604023, 0.766044), vec3(-0.219846, -0.604023, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.250000, -0.433013, 0.866025), vec3(-0.250000, -0.433013, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, -0.469846, 0.866025), vec3(-0.171010, -0.469846, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, -0.296198, 0.939693), vec3(-0.171010, -0.296198, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.116978, -0.321394, 0.939693), vec3(-0.116978, -0.321394, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.086824, -0.150384, 0.984808), vec3(-0.086824, -0.150384, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.059391, -0.163176, 0.984808), vec3(-0.059391, -0.163176, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, 1.000000), vec3(0.000000, 0.000000, 1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.059391, -0.163176, 0.984808), vec3(-0.059391, -0.163176, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.030154, -0.171010, 0.984808), vec3(-0.030154, -0.171010, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.116978, -0.321394, 0.939693), vec3(-0.116978, -0.321394, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.059391, -0.336824, 0.939693), vec3(-0.059391, -0.336824, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, -0.469846, 0.866025), vec3(-0.171010, -0.469846, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.086824, -0.492404, 0.866025), vec3(-0.086824, -0.492404, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.219846, -0.604023, 0.766044), vec3(-0.219846, -0.604023, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.111619, -0.633022, 0.766044), vec3(-0.111619, -0.633022, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.262003, -0.719846, 0.642788), vec3(-0.262003, -0.719846, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.133022, -0.754407, 0.642788), vec3(-0.133022, -0.754407, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.296198, -0.813798, 0.500000), vec3(-0.296198, -0.813798, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.150384, -0.852869, 0.500000), vec3(-0.150384, -0.852869, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, -0.883022, 0.342020), vec3(-0.321394, -0.883022, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.163176, -0.925417, 0.342020), vec3(-0.163176, -0.925417, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.336824, -0.925417, 0.173648), vec3(-0.336824, -0.925417, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, -0.969846, 0.173648), vec3(-0.171010, -0.969846, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.342020, -0.939693, 0.000000), vec3(-0.342020, -0.939693, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.173648, -0.984808, 0.000000), vec3(-0.173648, -0.984808, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.336824, -0.925417, -0.173648), vec3(-0.336824, -0.925417, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, -0.969846, -0.173648), vec3(-0.171010, -0.969846, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.321394, -0.883022, -0.342020), vec3(-0.321394, -0.883022, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.163176, -0.925417, -0.342020), vec3(-0.163176, -0.925417, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.296198, -0.813798, -0.500000), vec3(-0.296198, -0.813798, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.150384, -0.852869, -0.500000), vec3(-0.150384, -0.852869, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.262003, -0.719846, -0.642788), vec3(-0.262003, -0.719846, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.133022, -0.754407, -0.642788), vec3(-0.133022, -0.754407, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.219846, -0.604023, -0.766044), vec3(-0.219846, -0.604023, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.111619, -0.633022, -0.766044), vec3(-0.111619, -0.633022, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, -0.469846, -0.866025), vec3(-0.171010, -0.469846, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.086824, -0.492404, -0.866025), vec3(-0.086824, -0.492404, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.116978, -0.321394, -0.939693), vec3(-0.116978, -0.321394, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.059391, -0.336824, -0.939693), vec3(-0.059391, -0.336824, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.059391, -0.163176, -0.984808), vec3(-0.059391, -0.163176, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.030154, -0.171010, -0.984808), vec3(-0.030154, -0.171010, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, -1.000000), vec3(0.000000, 0.000000, -1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.030154, -0.171010, -0.984808), vec3(-0.030154, -0.171010, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.173648, -0.984808), vec3(-0.000000, -0.173648, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.059391, -0.336824, -0.939693), vec3(-0.059391, -0.336824, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.342020, -0.939693), vec3(-0.000000, -0.342020, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.086824, -0.492404, -0.866025), vec3(-0.086824, -0.492404, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.500000, -0.866025), vec3(-0.000000, -0.500000, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.111619, -0.633022, -0.766044), vec3(-0.111619, -0.633022, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.642788, -0.766044), vec3(-0.000000, -0.642788, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.133022, -0.754407, -0.642788), vec3(-0.133022, -0.754407, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.766044, -0.642788), vec3(-0.000000, -0.766044, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.150384, -0.852869, -0.500000), vec3(-0.150384, -0.852869, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.866025, -0.500000), vec3(-0.000000, -0.866025, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.163176, -0.925417, -0.342020), vec3(-0.163176, -0.925417, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.939693, -0.342020), vec3(-0.000000, -0.939693, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, -0.969846, -0.173648), vec3(-0.171010, -0.969846, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.984808, -0.173648), vec3(-0.000000, -0.984808, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.173648, -0.984808, 0.000000), vec3(-0.173648, -0.984808, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -1.000000, 0.000000), vec3(-0.000000, -1.000000, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.171010, -0.969846, 0.173648), vec3(-0.171010, -0.969846, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.984808, 0.173648), vec3(-0.000000, -0.984808, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.163176, -0.925417, 0.342020), vec3(-0.163176, -0.925417, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.939693, 0.342020), vec3(-0.000000, -0.939693, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.150384, -0.852869, 0.500000), vec3(-0.150384, -0.852869, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.866025, 0.500000), vec3(-0.000000, -0.866025, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.133022, -0.754407, 0.642788), vec3(-0.133022, -0.754407, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.766044, 0.642788), vec3(-0.000000, -0.766044, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.111619, -0.633022, 0.766044), vec3(-0.111619, -0.633022, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.642788, 0.766044), vec3(-0.000000, -0.642788, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.086824, -0.492404, 0.866025), vec3(-0.086824, -0.492404, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.500000, 0.866025), vec3(-0.000000, -0.500000, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.059391, -0.336824, 0.939693), vec3(-0.059391, -0.336824, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.342020, 0.939693), vec3(-0.000000, -0.342020, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.030154, -0.171010, 0.984808), vec3(-0.030154, -0.171010, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.173648, 0.984808), vec3(-0.000000, -0.173648, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, 1.000000), vec3(0.000000, 0.000000, 1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.173648, 0.984808), vec3(-0.000000, -0.173648, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.030154, -0.171010, 0.984808), vec3(0.030154, -0.171010, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.342020, 0.939693), vec3(-0.000000, -0.342020, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.059391, -0.336824, 0.939693), vec3(0.059391, -0.336824, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.500000, 0.866025), vec3(-0.000000, -0.500000, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.086824, -0.492404, 0.866025), vec3(0.086824, -0.492404, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.642788, 0.766044), vec3(-0.000000, -0.642788, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.111619, -0.633022, 0.766044), vec3(0.111619, -0.633022, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.766044, 0.642788), vec3(-0.000000, -0.766044, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.133022, -0.754407, 0.642788), vec3(0.133022, -0.754407, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.866025, 0.500000), vec3(-0.000000, -0.866025, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.150384, -0.852869, 0.500000), vec3(0.150384, -0.852869, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.939693, 0.342020), vec3(-0.000000, -0.939693, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.163176, -0.925417, 0.342020), vec3(0.163176, -0.925417, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.984808, 0.173648), vec3(-0.000000, -0.984808, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, -0.969846, 0.173648), vec3(0.171010, -0.969846, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -1.000000, 0.000000), vec3(-0.000000, -1.000000, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.173648, -0.984808, 0.000000), vec3(0.173648, -0.984808, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.984808, -0.173648), vec3(-0.000000, -0.984808, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, -0.969846, -0.173648), vec3(0.171010, -0.969846, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.939693, -0.342020), vec3(-0.000000, -0.939693, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.163176, -0.925417, -0.342020), vec3(0.163176, -0.925417, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.866025, -0.500000), vec3(-0.000000, -0.866025, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.150384, -0.852869, -0.500000), vec3(0.150384, -0.852869, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.766044, -0.642788), vec3(-0.000000, -0.766044, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.133022, -0.754407, -0.642788), vec3(0.133022, -0.754407, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.642788, -0.766044), vec3(-0.000000, -0.642788, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.111619, -0.633022, -0.766044), vec3(0.111619, -0.633022, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.500000, -0.866025), vec3(-0.000000, -0.500000, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.086824, -0.492404, -0.866025), vec3(0.086824, -0.492404, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.342020, -0.939693), vec3(-0.000000, -0.342020, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.059391, -0.336824, -0.939693), vec3(0.059391, -0.336824, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(-0.000000, -0.173648, -0.984808), vec3(-0.000000, -0.173648, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.030154, -0.171010, -0.984808), vec3(0.030154, -0.171010, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, -1.000000), vec3(0.000000, 0.000000, -1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.030154, -0.171010, -0.984808), vec3(0.030154, -0.171010, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.059391, -0.163176, -0.984808), vec3(0.059391, -0.163176, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.059391, -0.336824, -0.939693), vec3(0.059391, -0.336824, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.116978, -0.321394, -0.939693), vec3(0.116978, -0.321394, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.086824, -0.492404, -0.866025), vec3(0.086824, -0.492404, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, -0.469846, -0.866025), vec3(0.171010, -0.469846, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.111619, -0.633022, -0.766044), vec3(0.111619, -0.633022, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.219846, -0.604023, -0.766044), vec3(0.219846, -0.604023, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.133022, -0.754407, -0.642788), vec3(0.133022, -0.754407, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.262003, -0.719846, -0.642788), vec3(0.262003, -0.719846, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.150384, -0.852869, -0.500000), vec3(0.150384, -0.852869, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.296198, -0.813798, -0.500000), vec3(0.296198, -0.813798, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.163176, -0.925417, -0.342020), vec3(0.163176, -0.925417, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, -0.883022, -0.342020), vec3(0.321394, -0.883022, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, -0.969846, -0.173648), vec3(0.171010, -0.969846, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.336824, -0.925417, -0.173648), vec3(0.336824, -0.925417, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.173648, -0.984808, 0.000000), vec3(0.173648, -0.984808, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.342020, -0.939693, 0.000000), vec3(0.342020, -0.939693, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, -0.969846, 0.173648), vec3(0.171010, -0.969846, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.336824, -0.925417, 0.173648), vec3(0.336824, -0.925417, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.163176, -0.925417, 0.342020), vec3(0.163176, -0.925417, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, -0.883022, 0.342020), vec3(0.321394, -0.883022, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.150384, -0.852869, 0.500000), vec3(0.150384, -0.852869, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.296198, -0.813798, 0.500000), vec3(0.296198, -0.813798, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.133022, -0.754407, 0.642788), vec3(0.133022, -0.754407, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.262003, -0.719846, 0.642788), vec3(0.262003, -0.719846, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.111619, -0.633022, 0.766044), vec3(0.111619, -0.633022, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.219846, -0.604023, 0.766044), vec3(0.219846, -0.604023, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.086824, -0.492404, 0.866025), vec3(0.086824, -0.492404, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, -0.469846, 0.866025), vec3(0.171010, -0.469846, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.059391, -0.336824, 0.939693), vec3(0.059391, -0.336824, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.116978, -0.321394, 0.939693), vec3(0.116978, -0.321394, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.030154, -0.171010, 0.984808), vec3(0.030154, -0.171010, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.059391, -0.163176, 0.984808), vec3(0.059391, -0.163176, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, 1.000000), vec3(0.000000, 0.000000, 1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.059391, -0.163176, 0.984808), vec3(0.059391, -0.163176, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.086824, -0.150384, 0.984808), vec3(0.086824, -0.150384, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.116978, -0.321394, 0.939693), vec3(0.116978, -0.321394, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, -0.296198, 0.939693), vec3(0.171010, -0.296198, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, -0.469846, 0.866025), vec3(0.171010, -0.469846, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.250000, -0.433013, 0.866025), vec3(0.250000, -0.433013, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.219846, -0.604023, 0.766044), vec3(0.219846, -0.604023, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, -0.556670, 0.766044), vec3(0.321394, -0.556670, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.262003, -0.719846, 0.642788), vec3(0.262003, -0.719846, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.383022, -0.663414, 0.642788), vec3(0.383022, -0.663414, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.296198, -0.813798, 0.500000), vec3(0.296198, -0.813798, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.433013, -0.750000, 0.500000), vec3(0.433013, -0.750000, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, -0.883022, 0.342020), vec3(0.321394, -0.883022, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.469846, -0.813798, 0.342020), vec3(0.469846, -0.813798, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.336824, -0.925417, 0.173648), vec3(0.336824, -0.925417, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, -0.852869, 0.173648), vec3(0.492404, -0.852869, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.342020, -0.939693, 0.000000), vec3(0.342020, -0.939693, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.500000, -0.866025, 0.000000), vec3(0.500000, -0.866025, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.336824, -0.925417, -0.173648), vec3(0.336824, -0.925417, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, -0.852869, -0.173648), vec3(0.492404, -0.852869, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, -0.883022, -0.342020), vec3(0.321394, -0.883022, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.469846, -0.813798, -0.342020), vec3(0.469846, -0.813798, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.296198, -0.813798, -0.500000), vec3(0.296198, -0.813798, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.433013, -0.750000, -0.500000), vec3(0.433013, -0.750000, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.262003, -0.719846, -0.642788), vec3(0.262003, -0.719846, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.383022, -0.663414, -0.642788), vec3(0.383022, -0.663414, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.219846, -0.604023, -0.766044), vec3(0.219846, -0.604023, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, -0.556670, -0.766044), vec3(0.321394, -0.556670, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, -0.469846, -0.866025), vec3(0.171010, -0.469846, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.250000, -0.433013, -0.866025), vec3(0.250000, -0.433013, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.116978, -0.321394, -0.939693), vec3(0.116978, -0.321394, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, -0.296198, -0.939693), vec3(0.171010, -0.296198, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.059391, -0.163176, -0.984808), vec3(0.059391, -0.163176, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.086824, -0.150384, -0.984808), vec3(0.086824, -0.150384, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, -1.000000), vec3(0.000000, 0.000000, -1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.086824, -0.150384, -0.984808), vec3(0.086824, -0.150384, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.111619, -0.133022, -0.984808), vec3(0.111619, -0.133022, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, -0.296198, -0.939693), vec3(0.171010, -0.296198, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.219846, -0.262003, -0.939693), vec3(0.219846, -0.262003, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.250000, -0.433013, -0.866025), vec3(0.250000, -0.433013, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, -0.383022, -0.866025), vec3(0.321394, -0.383022, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, -0.556670, -0.766044), vec3(0.321394, -0.556670, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.413176, -0.492404, -0.766044), vec3(0.413176, -0.492404, -0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.383022, -0.663414, -0.642788), vec3(0.383022, -0.663414, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, -0.586824, -0.642788), vec3(0.492404, -0.586824, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.433013, -0.750000, -0.500000), vec3(0.433013, -0.750000, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.556670, -0.663414, -0.500000), vec3(0.556670, -0.663414, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.469846, -0.813798, -0.342020), vec3(0.469846, -0.813798, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.604023, -0.719846, -0.342020), vec3(0.604023, -0.719846, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, -0.852869, -0.173648), vec3(0.492404, -0.852869, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.633022, -0.754407, -0.173648), vec3(0.633022, -0.754407, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.500000, -0.866025, 0.000000), vec3(0.500000, -0.866025, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.642788, -0.766044, 0.000000), vec3(0.642788, -0.766044, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, -0.852869, 0.173648), vec3(0.492404, -0.852869, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.633022, -0.754407, 0.173648), vec3(0.633022, -0.754407, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.469846, -0.813798, 0.342020), vec3(0.469846, -0.813798, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.604023, -0.719846, 0.342020), vec3(0.604023, -0.719846, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.433013, -0.750000, 0.500000), vec3(0.433013, -0.750000, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.556670, -0.663414, 0.500000), vec3(0.556670, -0.663414, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.383022, -0.663414, 0.642788), vec3(0.383022, -0.663414, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, -0.586824, 0.642788), vec3(0.492404, -0.586824, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, -0.556670, 0.766044), vec3(0.321394, -0.556670, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.413176, -0.492404, 0.766044), vec3(0.413176, -0.492404, 0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.250000, -0.433013, 0.866025), vec3(0.250000, -0.433013, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, -0.383022, 0.866025), vec3(0.321394, -0.383022, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, -0.296198, 0.939693), vec3(0.171010, -0.296198, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.219846, -0.262003, 0.939693), vec3(0.219846, -0.262003, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.086824, -0.150384, 0.984808), vec3(0.086824, -0.150384, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.111619, -0.133022, 0.984808), vec3(0.111619, -0.133022, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, 1.000000), vec3(0.000000, 0.000000, 1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.111619, -0.133022, 0.984808), vec3(0.111619, -0.133022, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.133022, -0.111619, 0.984808), vec3(0.133022, -0.111619, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.219846, -0.262003, 0.939693), vec3(0.219846, -0.262003, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.262003, -0.219846, 0.939693), vec3(0.262003, -0.219846, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, -0.383022, 0.866025), vec3(0.321394, -0.383022, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.383022, -0.321394, 0.866025), vec3(0.383022, -0.321394, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.413176, -0.492404, 0.766044), vec3(0.413176, -0.492404, 0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, -0.413176, 0.766044), vec3(0.492404, -0.413176, 0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, -0.586824, 0.642788), vec3(0.492404, -0.586824, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.586824, -0.492404, 0.642788), vec3(0.586824, -0.492404, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.556670, -0.663414, 0.500000), vec3(0.556670, -0.663414, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.663414, -0.556670, 0.500000), vec3(0.663414, -0.556670, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.604023, -0.719846, 0.342020), vec3(0.604023, -0.719846, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.719846, -0.604023, 0.342020), vec3(0.719846, -0.604023, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.633022, -0.754407, 0.173648), vec3(0.633022, -0.754407, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.754407, -0.633022, 0.173648), vec3(0.754407, -0.633022, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.642788, -0.766044, 0.000000), vec3(0.642788, -0.766044, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.766044, -0.642788, 0.000000), vec3(0.766044, -0.642788, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.633022, -0.754407, -0.173648), vec3(0.633022, -0.754407, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.754407, -0.633022, -0.173648), vec3(0.754407, -0.633022, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.604023, -0.719846, -0.342020), vec3(0.604023, -0.719846, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.719846, -0.604023, -0.342020), vec3(0.719846, -0.604023, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.556670, -0.663414, -0.500000), vec3(0.556670, -0.663414, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.663414, -0.556670, -0.500000), vec3(0.663414, -0.556670, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, -0.586824, -0.642788), vec3(0.492404, -0.586824, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.586824, -0.492404, -0.642788), vec3(0.586824, -0.492404, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.413176, -0.492404, -0.766044), vec3(0.413176, -0.492404, -0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, -0.413176, -0.766044), vec3(0.492404, -0.413176, -0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, -0.383022, -0.866025), vec3(0.321394, -0.383022, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.383022, -0.321394, -0.866025), vec3(0.383022, -0.321394, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.219846, -0.262003, -0.939693), vec3(0.219846, -0.262003, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.262003, -0.219846, -0.939693), vec3(0.262003, -0.219846, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.111619, -0.133022, -0.984808), vec3(0.111619, -0.133022, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.133022, -0.111619, -0.984808), vec3(0.133022, -0.111619, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, -1.000000), vec3(0.000000, 0.000000, -1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.133022, -0.111619, -0.984808), vec3(0.133022, -0.111619, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.150384, -0.086824, -0.984808), vec3(0.150384, -0.086824, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.262003, -0.219846, -0.939693), vec3(0.262003, -0.219846, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.296198, -0.171010, -0.939693), vec3(0.296198, -0.171010, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.383022, -0.321394, -0.866025), vec3(0.383022, -0.321394, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.433013, -0.250000, -0.866025), vec3(0.433013, -0.250000, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, -0.413176, -0.766044), vec3(0.492404, -0.413176, -0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.556670, -0.321394, -0.766044), vec3(0.556670, -0.321394, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.586824, -0.492404, -0.642788), vec3(0.586824, -0.492404, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.663414, -0.383022, -0.642788), vec3(0.663414, -0.383022, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.663414, -0.556670, -0.500000), vec3(0.663414, -0.556670, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.750000, -0.433013, -0.500000), vec3(0.750000, -0.433013, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.719846, -0.604023, -0.342020), vec3(0.719846, -0.604023, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.813798, -0.469846, -0.342020), vec3(0.813798, -0.469846, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.754407, -0.633022, -0.173648), vec3(0.754407, -0.633022, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.852869, -0.492404, -0.173648), vec3(0.852869, -0.492404, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.766044, -0.642788, 0.000000), vec3(0.766044, -0.642788, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.866025, -0.500000, 0.000000), vec3(0.866025, -0.500000, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.754407, -0.633022, 0.173648), vec3(0.754407, -0.633022, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.852869, -0.492404, 0.173648), vec3(0.852869, -0.492404, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.719846, -0.604023, 0.342020), vec3(0.719846, -0.604023, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.813798, -0.469846, 0.342020), vec3(0.813798, -0.469846, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.663414, -0.556670, 0.500000), vec3(0.663414, -0.556670, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.750000, -0.433013, 0.500000), vec3(0.750000, -0.433013, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.586824, -0.492404, 0.642788), vec3(0.586824, -0.492404, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.663414, -0.383022, 0.642788), vec3(0.663414, -0.383022, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, -0.413176, 0.766044), vec3(0.492404, -0.413176, 0.766045), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.556670, -0.321394, 0.766044), vec3(0.556670, -0.321394, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.383022, -0.321394, 0.866025), vec3(0.383022, -0.321394, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.433013, -0.250000, 0.866025), vec3(0.433013, -0.250000, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.262003, -0.219846, 0.939693), vec3(0.262003, -0.219846, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.296198, -0.171010, 0.939693), vec3(0.296198, -0.171010, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.133022, -0.111619, 0.984808), vec3(0.133022, -0.111619, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.150384, -0.086824, 0.984808), vec3(0.150384, -0.086824, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, 1.000000), vec3(0.000000, 0.000000, 1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.150384, -0.086824, 0.984808), vec3(0.150384, -0.086824, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.163176, -0.059391, 0.984808), vec3(0.163176, -0.059391, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.296198, -0.171010, 0.939693), vec3(0.296198, -0.171010, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, -0.116978, 0.939693), vec3(0.321394, -0.116978, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.433013, -0.250000, 0.866025), vec3(0.433013, -0.250000, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.469846, -0.171010, 0.866025), vec3(0.469846, -0.171010, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.556670, -0.321394, 0.766044), vec3(0.556670, -0.321394, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.604023, -0.219846, 0.766044), vec3(0.604023, -0.219846, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.663414, -0.383022, 0.642788), vec3(0.663414, -0.383022, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.719846, -0.262003, 0.642788), vec3(0.719846, -0.262003, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.750000, -0.433013, 0.500000), vec3(0.750000, -0.433013, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.813798, -0.296198, 0.500000), vec3(0.813798, -0.296198, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.813798, -0.469846, 0.342020), vec3(0.813798, -0.469846, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.883022, -0.321394, 0.342020), vec3(0.883022, -0.321394, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.852869, -0.492404, 0.173648), vec3(0.852869, -0.492404, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.925417, -0.336824, 0.173648), vec3(0.925417, -0.336824, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.866025, -0.500000, 0.000000), vec3(0.866025, -0.500000, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.939693, -0.342020, 0.000000), vec3(0.939693, -0.342020, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.852869, -0.492404, -0.173648), vec3(0.852869, -0.492404, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.925417, -0.336824, -0.173648), vec3(0.925417, -0.336824, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.813798, -0.469846, -0.342020), vec3(0.813798, -0.469846, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.883022, -0.321394, -0.342020), vec3(0.883022, -0.321394, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.750000, -0.433013, -0.500000), vec3(0.750000, -0.433013, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.813798, -0.296198, -0.500000), vec3(0.813798, -0.296198, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.663414, -0.383022, -0.642788), vec3(0.663414, -0.383022, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.719846, -0.262003, -0.642788), vec3(0.719846, -0.262003, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.556670, -0.321394, -0.766044), vec3(0.556670, -0.321394, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.604023, -0.219846, -0.766044), vec3(0.604023, -0.219846, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.433013, -0.250000, -0.866025), vec3(0.433013, -0.250000, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.469846, -0.171010, -0.866025), vec3(0.469846, -0.171010, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.296198, -0.171010, -0.939693), vec3(0.296198, -0.171010, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, -0.116978, -0.939693), vec3(0.321394, -0.116978, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.150384, -0.086824, -0.984808), vec3(0.150384, -0.086824, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.163176, -0.059391, -0.984808), vec3(0.163176, -0.059391, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, -1.000000), vec3(0.000000, 0.000000, -1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.163176, -0.059391, -0.984808), vec3(0.163176, -0.059391, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, -0.030154, -0.984808), vec3(0.171010, -0.030154, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, -0.116978, -0.939693), vec3(0.321394, -0.116978, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.336824, -0.059391, -0.939693), vec3(0.336824, -0.059391, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.469846, -0.171010, -0.866025), vec3(0.469846, -0.171010, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, -0.086824, -0.866025), vec3(0.492404, -0.086824, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.604023, -0.219846, -0.766044), vec3(0.604023, -0.219846, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.633022, -0.111619, -0.766044), vec3(0.633022, -0.111619, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.719846, -0.262003, -0.642788), vec3(0.719846, -0.262003, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.754407, -0.133022, -0.642788), vec3(0.754407, -0.133022, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.813798, -0.296198, -0.500000), vec3(0.813798, -0.296198, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.852869, -0.150384, -0.500000), vec3(0.852869, -0.150384, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.883022, -0.321394, -0.342020), vec3(0.883022, -0.321394, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.925417, -0.163176, -0.342020), vec3(0.925417, -0.163176, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.925417, -0.336824, -0.173648), vec3(0.925417, -0.336824, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.969846, -0.171010, -0.173648), vec3(0.969846, -0.171010, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.939693, -0.342020, 0.000000), vec3(0.939693, -0.342020, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.984808, -0.173648, 0.000000), vec3(0.984808, -0.173648, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.925417, -0.336824, 0.173648), vec3(0.925417, -0.336824, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.969846, -0.171010, 0.173648), vec3(0.969846, -0.171010, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.883022, -0.321394, 0.342020), vec3(0.883022, -0.321394, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.925417, -0.163176, 0.342020), vec3(0.925417, -0.163176, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.813798, -0.296198, 0.500000), vec3(0.813798, -0.296198, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.852869, -0.150384, 0.500000), vec3(0.852869, -0.150384, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.719846, -0.262003, 0.642788), vec3(0.719846, -0.262003, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.754407, -0.133022, 0.642788), vec3(0.754407, -0.133022, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.604023, -0.219846, 0.766044), vec3(0.604023, -0.219846, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.633022, -0.111619, 0.766044), vec3(0.633022, -0.111619, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.469846, -0.171010, 0.866025), vec3(0.469846, -0.171010, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, -0.086824, 0.866025), vec3(0.492404, -0.086824, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.321394, -0.116978, 0.939693), vec3(0.321394, -0.116978, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.336824, -0.059391, 0.939693), vec3(0.336824, -0.059391, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.163176, -0.059391, 0.984808), vec3(0.163176, -0.059391, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, -0.030154, 0.984808), vec3(0.171010, -0.030154, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, 1.000000), vec3(0.000000, 0.000000, 1.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, -0.030154, 0.984808), vec3(0.171010, -0.030154, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.173648, -0.000000, 0.984808), vec3(0.173648, -0.000000, 0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.336824, -0.059391, 0.939693), vec3(0.336824, -0.059391, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.342020, -0.000000, 0.939693), vec3(0.342020, -0.000000, 0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, -0.086824, 0.866025), vec3(0.492404, -0.086824, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.500000, -0.000000, 0.866025), vec3(0.500000, -0.000000, 0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.633022, -0.111619, 0.766044), vec3(0.633022, -0.111619, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.642788, -0.000000, 0.766044), vec3(0.642788, -0.000000, 0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.754407, -0.133022, 0.642788), vec3(0.754407, -0.133022, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.766044, -0.000000, 0.642788), vec3(0.766044, -0.000000, 0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.852869, -0.150384, 0.500000), vec3(0.852869, -0.150384, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.866025, -0.000000, 0.500000), vec3(0.866025, -0.000000, 0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.925417, -0.163176, 0.342020), vec3(0.925417, -0.163176, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.939693, -0.000000, 0.342020), vec3(0.939693, -0.000000, 0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.969846, -0.171010, 0.173648), vec3(0.969846, -0.171010, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.984808, -0.000000, 0.173648), vec3(0.984808, -0.000000, 0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.984808, -0.173648, 0.000000), vec3(0.984808, -0.173648, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(1.000000, -0.000000, 0.000000), vec3(1.000000, -0.000000, 0.000000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.969846, -0.171010, -0.173648), vec3(0.969846, -0.171010, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.984808, -0.000000, -0.173648), vec3(0.984808, -0.000000, -0.173648), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.925417, -0.163176, -0.342020), vec3(0.925417, -0.163176, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.939693, -0.000000, -0.342020), vec3(0.939693, -0.000000, -0.342020), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.852869, -0.150384, -0.500000), vec3(0.852869, -0.150384, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.866025, -0.000000, -0.500000), vec3(0.866025, -0.000000, -0.500000), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.754407, -0.133022, -0.642788), vec3(0.754407, -0.133022, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.766044, -0.000000, -0.642788), vec3(0.766044, -0.000000, -0.642788), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.633022, -0.111619, -0.766044), vec3(0.633022, -0.111619, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.642788, -0.000000, -0.766044), vec3(0.642788, -0.000000, -0.766044), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.492404, -0.086824, -0.866025), vec3(0.492404, -0.086824, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.500000, -0.000000, -0.866025), vec3(0.500000, -0.000000, -0.866025), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.336824, -0.059391, -0.939693), vec3(0.336824, -0.059391, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.342020, -0.000000, -0.939693), vec3(0.342020, -0.000000, -0.939693), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.171010, -0.030154, -0.984808), vec3(0.171010, -0.030154, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.173648, -0.000000, -0.984808), vec3(0.173648, -0.000000, -0.984808), vec3(1.0f, 0.05f, 0.05f) },
        { vec3(0.000000, 0.000000, -1.000000), vec3(0.000000, 0.000000, -1.000000),   vec3(1.0f, 0.05f, 0.05f) },
//Draw green Y
vertex(vec3(0.000000, -1.000000, -1.000000), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.000000, 1.000000, -1.000000), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.195090, -1.000000, -0.980785), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.195090, 1.000000, -0.980785), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.382683, -1.000000, -0.923880), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.382683, 1.000000, -0.923880), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.555570, -1.000000, -0.831470), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.555570, 1.000000, -0.831470), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.707107, -1.000000, -0.707107), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.707107, 1.000000, -0.707107), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.831470, -1.000000, -0.555570), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.831470, 1.000000, -0.555570), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.923880, -1.000000, -0.382683), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.923880, 1.000000, -0.382683), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.980785, -1.000000, -0.195090), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.980785, 1.000000, -0.195090), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(1.000000, -1.000000, -0.000000), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(1.000000, 1.000000, -0.000000), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.980785, -1.000000, 0.195090), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.980785, 1.000000, 0.195090), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.923880, -1.000000, 0.382683), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.923880, 1.000000, 0.382683), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.831470, -1.000000, 0.555570), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.831470, 1.000000, 0.555570), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.707107, -1.000000, 0.707107), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.707107, 1.000000, 0.707107), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.555570, -1.000000, 0.831470), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.555570, 1.000000, 0.831470), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.382683, -1.000000, 0.923880), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.382683, 1.000000, 0.923880), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.195090, -1.000000, 0.980785), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(0.195090, 1.000000, 0.980785), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.000000, -1.000000, 1.000000), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.000000, 1.000000, 1.000000), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.195091, -1.000000, 0.980785), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.195091, 1.000000, 0.980785), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.382684, -1.000000, 0.923879), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.382684, 1.000000, 0.923879), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.555571, -1.000000, 0.831469), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.555571, 1.000000, 0.831469), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.707107, -1.000000, 0.707106), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.707107, 1.000000, 0.707106), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.831470, -1.000000, 0.555570), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.831470, 1.000000, 0.555570), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.923880, -1.000000, 0.382683), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.923880, 1.000000, 0.382683), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.980785, -1.000000, 0.195089), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.980785, 1.000000, 0.195089), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-1.000000, -1.000000, -0.000001), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-1.000000, 1.000000, -0.000001), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.980785, -1.000000, -0.195091), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.980785, 1.000000, -0.195091), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.923879, -1.000000, -0.382684), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.923879, 1.000000, -0.382684), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.831469, -1.000000, -0.555571), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.831469, 1.000000, -0.555571), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.707106, -1.000000, -0.707108), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.707106, 1.000000, -0.707108), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.555569, -1.000000, -0.831470), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.555569, 1.000000, -0.831470), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.382682, -1.000000, -0.923880), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.382682, 1.000000, -0.923880), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.195089, -1.000000, -0.980786), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),
vertex(vec3(-0.195089, 1.000000, -0.980786), vec3(1.0f, 1.0f, 1.0f), vec2(0.0f, 0.0f)),



};

int createVAO()
{
    
    GLuint VAO;
    glGenVertexArrays(1, &VAO);
    glBindVertexArray(VAO);

  
    GLuint VBO;
    glGenBuffers(1, &VBO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(VertexArray), VertexArray, GL_STATIC_DRAW);

    glVertexAttribPointer(0,                   // attribute 0 matches aPos in Vertex Shader
        3,                   // size
        GL_FLOAT,            // type
        GL_FALSE,            // normalized?
        sizeof(vertex), // stride - each vertex contain 2 vec3 (position, color)
        (void*)0             // array buffer offset
    );
    glEnableVertexAttribArray(0);


    glVertexAttribPointer(1,                            // attribute 1 matches aColor in Vertex Shader
        3,
        GL_FLOAT,
        GL_FALSE,
        sizeof(vertex),
        (void*)sizeof(vec3)      // color is offseted a vec3 (comes after position)
    );
    glEnableVertexAttribArray(1);

    glVertexAttribPointer(2,                            // attribute 2 matches aUV in Vertex Shader
        2,
        GL_FLOAT,
        GL_FALSE,
        sizeof(vertex),
        (void*)(2 * sizeof(vec3))      // uv is offseted by 2 vec3 (comes after position and color)
    );
    glEnableVertexAttribArray(2);

    return VBO;
}


//Draw axis by translate o.1f above the ground which is y=0.1f, and scale them to 7 axis long. To be more obvious, the other 2 variables also scaled up.
//Render them by GL_LINES
void drawAxis(GLint worldMatrixLocation, GLint colorLocation)
{
   
    mat4 lineMatrix;
    lineMatrix = translate(mat4(1.0f), vec3(0.0f, 1.1f, 0.0f)) * scale(mat4(1.0f), vec3(0.25f, 1.25f, 0.25f));
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &lineMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(vec3(0,1.0f,0)));
    glDrawArrays(GL_TRIANGLE_STRIP, 1308, 64);
    lineMatrix = translate(mat4(1.0f), vec3(1.1f, 0.2f, 0.0f)) *rotate(mat4(1.0f),radians(90.0f),vec3(0,0,1.0f))* scale(mat4(1.0f), vec3(0.25f, 1.25f, 0.25f));
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &lineMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(vec3(1.0f, 0.0f, 0)));
    glDrawArrays(GL_TRIANGLE_STRIP, 1308, 64);
    lineMatrix = translate(mat4(1.0f), vec3(0.0f, 0.2f, 1.1f)) * rotate(mat4(1.0f), radians(90.0f), vec3(1.0, 0, 0.0f)) * scale(mat4(1.0f), vec3(0.25f, 1.25f, 0.25f));
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &lineMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(vec3(0, 0.0f, 1.0f)));
    glDrawArrays(GL_TRIANGLE_STRIP, 1308, 64);
}


//Draw grid in two for loops, which begins from -64 to +64. It represent the (x,z) coordinate and draw grid at each position.
void drawGrid(GLint worldMatrixLocation, GLint colorLocation)
{
    mat4 groundWorldMatrix;
    for (int i = -64; i < 64; i++) {
        for (int j = -64; j < 64; j++) {
            groundWorldMatrix = translate(mat4(1.0f), vec3(1.0f * j, 0.0f, 1.0f * i));
            glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &groundWorldMatrix[0][0]);
            glUniform3fv(colorLocation, 1, value_ptr(vec3(1.0f)));
            glDrawArrays(GL_LINE_LOOP, 0, 4);
        }
    }
}

//Constant Variables
const int Width = 1024;                 //Set window width and heights
const int Height = 768;


//Tool variables
bool whole=false;

float worldX = 0.0f;                   //Rotation angle toward X axis.
float worldY = 0.0f;                   //Rotation angle toward Y axis.


float zoom_size0 = 1.0;                //Scale coefficients of different models, because they are distinct, one scale won't influence others.
float zoom_size1 = 1.0;
float zoom_size2 = 1.0;
float zoom_size3 = 1.0;
float zoom_size4 = 1.0;
float zoom_size5 = 1.0;
float zoom_size6 = 1.0;
float zoom_size7 = 1.0;
float zoom_size8 = 1.0;

float Angle0 = 0.0f;                   //Rotation coefficients of different models, because they are distinct, one rotation won't influence others.
float Angle1 = 0.0f;
float Angle2 = 0.0f;
float Angle3 = 0.0f;
float Angle4 = 0.0f;
float Angle5 = 0.0f;
float Angle6 = 0.0f;
float Angle7 = 0.0f;
float Angle8 = 0.0f;


  float X0 = 0.0f; float Z0 = 64.0f;
  float X1 = 0.0f; float Z1 = 64.0f;
  float X2 = 0.0f; float Z2 = 64.0f;
  float X3 = 0.0f; float Z3 = 64.0f;
  float X4 = 0.0f; float Z4 = 64.0f;
  float X5 = 0.0f; float Z5 = 64.0f;
  float X6 = 0.0f; float Z6 = 64.0f;
  float X7 = 0.0f; float Z7 = 64.0f;
  float X8 = 0.0f; float Z8 = 64.0f;


bool flag0 = false;                    //Flags are used to record if button are pressed and if other button it won't changed state until pressing home button.
bool flag1 = false;
bool flag2 = false;
bool flag3 = false;
bool flag4 = false;
bool flag5 = false;
bool flag6 = false;
bool flag7 = false;
//Represent world X-Z coordinates of each letter and digits
float coor0[4][2] = { {-10.213f,0.0f},{-3.5f,0.0f},{3.813f,0.0f},{8.426f,0.0f} };
float coor1[4][2] = { {11.269f,63.0f},{ 5.056f, 63.8f},{-5.056f, 63.8f},{-11.269f, 63.0f} };
float coor2[4][2] = { {-63.0f,11.269f}, {-63.8f,5.056f}, {-63.8f,-5.056f},{-63.0f,-11.269f} };
float coor3[4][2] = { {-11.269f,-63.0f},{-5.056f,-63.8f},{5.056f,-63.8f},{11.269f,-63.0f} };
float coor4[4][2] = { {63.0f,-11.269f},{63.8f,-5.056f},{63.8f,5.056f},{63.0f,11.269f} };

//Status recorded which model is activated, and only one model can be activated at the same time.
bool status[8] = { false,false, false, false, false,false,false,false };

mat4 grand_parent; 
//Initialize render type to triangle, user can change it by pressing button.
int rendertype0 = GL_TRIANGLES;
int rendertype1 = GL_TRIANGLE_STRIP;


vec3 colors[8] = 
{
      vec3(0.7f,0.2f,0.5f),vec3(0.2,0.3,0.7),
      vec3(0.2,0.76,0.34),vec3(0.8,0.3,0.3),
      vec3(0.2,0.3,0.84),vec3(0.77,0.67,0.11),
      vec3(0.12,0.78,0.49),vec3(0.67,0.35,0.57)


};
//Tool Method 



// DrawMethod


void drawQuiz(int worldMatrixLocation, int colorLocation,float x, float z, float angle) {
   
    
   
    mat4 modelWorldMatrix;


    mat4 parentY =  translate(mat4(1.0f), vec3(X0, 0.0f, Z0)) * rotate(mat4(1.0f), radians(Angle0), vec3(0.0f, 1.0, 0.0f)) * scale(mat4(1.0f), vec3(zoom_size0));
    mat4 Y1 = translate(mat4(1.0f), vec3(0, 0.5f, 0))  * scale(mat4(0.5f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    
    if (whole) 
    {
        grand_parent = translate(mat4(1.0f), vec3(X8, 0.0f, Z8)) * rotate(mat4(1.0f), radians(Angle8), vec3(0.0f, 1.0, 0.0f)) * scale(mat4(1.0f), vec3(zoom_size8));
    }
    else
    {
        grand_parent = rotate(mat4(1.0f), radians(angle), vec3(0.0f, 1.0f, 0.0f));
    }
    
    
    if (status[0])
    {
        if (flag0)
        {
            modelWorldMatrix = grand_parent * parentY * Y1;
        }

        else
        {
            modelWorldMatrix = parentY * Y1;
        }

    }
    else 
    {
        modelWorldMatrix = parentY *  Y1;
    }

    if (whole)
    {
        modelWorldMatrix = grand_parent * Y1;
    }
   
    
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[0]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 Y4 = translate(mat4(1.0f), vec3(0, 1.5f, 0)) * scale(mat4(0.5f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag0)
    {
        modelWorldMatrix = grand_parent * parentY * Y4;
    }
    else
    {
        modelWorldMatrix = parentY * Y4;
    }

    if (whole)
    {
        modelWorldMatrix = grand_parent * Y4;
    }
   
    mat4 Y2 = translate(mat4(1.0f), vec3(-0.5f, 2.25f, 0)) * rotate(mat4(1.0f), radians(45.0f), vec3(0.0f, 0, 1.0f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[0]));
    glDrawArrays(rendertype1, 47, 1260);
   
    if (flag0)
      {
            modelWorldMatrix = grand_parent * parentY * Y2;
      }
    
    else
      {
            modelWorldMatrix = parentY * Y2;
      }
    if (whole)
    {
        modelWorldMatrix = grand_parent * Y2;
    }
    
    
    
    
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[0]));
    glDrawArrays(rendertype0, 10, 36);

    mat4 Y3 = translate(mat4(1.0f), vec3(0.5f, 2.25f, 0)) * rotate(mat4(1.0f), radians(-45.0f), vec3(0.0f, 0, 1.0f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    
    
    if (flag0)
        {
            modelWorldMatrix = grand_parent * parentY * Y3;
        }
        
    else
        {
            modelWorldMatrix = parentY * Y3;
        }

    if (whole)
    {
        modelWorldMatrix = grand_parent * Y3;
    }
 
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[0]));
    glDrawArrays(rendertype0, 10, 36);



    //Draw A

    mat4 parentA = translate(mat4(1.0f), vec3(X1, 0.0f, Z1)) * rotate(mat4(1.0f), radians(Angle1), vec3(0.0f, 1.0, 0.0f)) * scale(mat4(1.0f), vec3(zoom_size1));
    

    mat4 A1 = translate(mat4(1.0f),vec3(-0.43f, 4.2f,0)) * rotate(mat4(1.0f), radians(-30.0f), vec3(0.0f, 0, 1.0f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (status[1])
    {
        if (flag1)
        {
            modelWorldMatrix = grand_parent * parentA * A1;
        }
       
        else
        {
            modelWorldMatrix = parentA * A1;
        }
    }
    
    else
    {
        modelWorldMatrix = parentA * A1;
    }


    if (whole)
    {
        modelWorldMatrix = grand_parent * A1;
    }

    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[1]));
    glDrawArrays(rendertype0, 10, 36);

    mat4 A2 = translate(mat4(1.0f), vec3(0.43f, 4.2f, 0)) * rotate(mat4(1.0f), radians(30.0f), vec3(0.0f, 0, 1.0f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
  
        if (flag1)
        {
            modelWorldMatrix = grand_parent * parentA * A2;
        }
        
        else
        {
            modelWorldMatrix = parentA * A2;
        }

    if (whole)
    {
        modelWorldMatrix = grand_parent * A2;
    }

    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[1]));
    glDrawArrays(rendertype0, 10, 36);

    mat4 A3 = translate(mat4(1.0f), vec3(0, 3.7f, 0))  * scale(mat4(1.0f), vec3(1.0f, 0.5f, 0.25f));
    if (flag1)
        {
            modelWorldMatrix = grand_parent * parentA * A3;
        }
    
    else
        {
            modelWorldMatrix = parentA * A3;
        }
    if (whole)
    {
        modelWorldMatrix = grand_parent * A3;
    }
   

    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[1]));
    glDrawArrays(rendertype0, 10, 36);

    mat4 A4 = translate(mat4(1.0f), vec3(0.9f, 3.4f, 0)) * rotate(mat4(1.0f), radians(30.0f), vec3(0.0f, 0, 1.0f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag1)
    {
        modelWorldMatrix = grand_parent * parentA * A4;
    }
  
    else
    {
        modelWorldMatrix = parentA * A4;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * A4;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[1]));
    glDrawArrays(rendertype0, 10, 36);

    mat4 A5 = translate(mat4(1.0f), vec3(-0.9f, 3.4f, 0)) * rotate(mat4(1.0f), radians(-30.0f), vec3(0.0f, 0, 1.0f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag1)
    {
        modelWorldMatrix = grand_parent * parentA * A5;
    }
    else
    {
        modelWorldMatrix = parentA * A5;
    }

    if (whole)
    {
        modelWorldMatrix = grand_parent * A5;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[1]));
    glDrawArrays(rendertype0, 10, 36);

    //Draw N
    mat4  parentN = translate(mat4(1.0f), vec3(X2, 0.0f, Z2)) * rotate(mat4(1.0f), radians(Angle2), vec3(0.0f, 1.0, 0.0f)) * scale(mat4(1.0f), vec3(zoom_size2));
    mat4 N1 = translate(mat4(1.0f), vec3(0.8f, 5.2f, 0)) * scale(mat4(1.0f), vec3(0.5))* scale(mat4(1.0f), vec3(0.5f,1.0f,0.25f));
    if (status[2]) 
    {
  
        if (flag2) 
        {
            modelWorldMatrix = grand_parent * parentN * N1;
        }
        else
        {
            modelWorldMatrix = parentN * N1;
        }
    }
    else
    {
        modelWorldMatrix = parentN * N1;
    }

    if (whole)
    {
        modelWorldMatrix = grand_parent * N1;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[2]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 N2 = translate(mat4(1.0f), vec3(0.8f, 6.2f, 0)) * scale(mat4(1.0f), vec3(0.5)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag2)
        {
            modelWorldMatrix = grand_parent * parentN * N2;
        }
     else
        {
            modelWorldMatrix = parentN * N2;
        }
    if (whole)
    {
        modelWorldMatrix = grand_parent * N2;
    }
    
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[2]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 N3 = translate(mat4(1.0f), vec3(-0.2f, 6.0f, 0)) * rotate(mat4(1.0f), radians(-145.0f), vec3(0.0f, 0.0f, 1.0f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag2)
        {
            modelWorldMatrix = grand_parent * parentN * N3;
        }
        else
        {
            modelWorldMatrix = parentN * N3;
        }
    if (whole)
    {
        modelWorldMatrix = grand_parent * N3;
    }
    
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[2]));
    glDrawArrays(rendertype0, 10, 36);

    mat4 N4 = translate(mat4(1.0f),vec3(0.3f,5.3f,0)) * rotate(mat4(1.0f), radians(-145.0f), vec3(0.0f, 0.0f, 1.0f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag2)
    {
        modelWorldMatrix = grand_parent * parentN * N4;
    }
    else
    {
        modelWorldMatrix = parentN * N4;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * N4;
    }


    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[2]));
    glDrawArrays(rendertype0, 10, 36);

    mat4 N5 = translate(mat4(1.0f), vec3(-0.7f, 5.2f, 0)) * scale(mat4(1.0f), vec3(0.5)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag2)
    {
        modelWorldMatrix = grand_parent * parentN * N5;
    }
    else
    {
        modelWorldMatrix = parentN * N5;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * N5;
    }

    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[2]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 N6 = translate(mat4(1.0f), vec3(-0.7f, 6.2f, 0)) * scale(mat4(1.0f), vec3(0.5)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag2)
    {
        modelWorldMatrix = grand_parent * parentN * N6;
    }
    else
    {
        modelWorldMatrix = parentN * N6;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * N6;
    }
    
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[2]));
    glDrawArrays(rendertype1, 47, 1260);
  /*  glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &scale(mat4(1.0f),vec3(0.25f))[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[2]));
    glDrawArrays(rendertype1, 47, 1260);*/



    //Draw G
    mat4 parentG = translate(mat4(1.0f), vec3(X3, 0.0f, Z3)) * rotate(mat4(1.0f), radians(Angle3), vec3(0.0f, 1.0, 0.0f)) * scale(mat4(1.0f), vec3(zoom_size3));


    mat4 G1 = translate(mat4(1.0f), vec3(0, 7.0f, 0)) * scale(mat4(1.0f), vec3(1.0f, 0.5f, 0.25f));
    if (status[3])
    {

        if (flag3)
        {
            modelWorldMatrix = grand_parent * parentG * G1;
        }
        else
        {
            modelWorldMatrix = parentG * G1;
        }
    }
    else
    {
        modelWorldMatrix = parentG * G1;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * G1;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[3]));
    glDrawArrays(rendertype0, 10, 36);

    mat4 G2  = translate(mat4(1.0f), vec3(0.5f, 7.5f, 0)) * scale(mat4(1.0f),vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag3)
    {
        modelWorldMatrix = grand_parent * parentG * G2;
    }
    else
    {
        modelWorldMatrix = parentG * G2;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * G2;
    }
   
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[3]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 G3 = translate(mat4(1.0f), vec3(0.5f, 8.0f, 0)) * scale(mat4(1.0f), vec3(1.0f, 0.5f, 0.25f));
    if (flag3)
    {
        modelWorldMatrix = grand_parent * parentG * G3;
    }
    else
    {
        modelWorldMatrix = parentG * G3;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * G3;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[3]));
    glDrawArrays(rendertype0, 10, 36);

    mat4 G4 = translate(mat4(1.0f), vec3(-0.5f, 7.3f, 0)) *rotate(mat4(1.0f),radians(-45.0f),vec3(0,0,1.0f))* scale(mat4(1.0f), vec3(1.0f, 0.5f, 0.25f));
    if (flag3)
    {
        modelWorldMatrix = grand_parent * parentG * G4;
    }
    else
    {
        modelWorldMatrix = parentG * G4;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * G4;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[3]));
    glDrawArrays(rendertype0, 10, 36);

    mat4 G5 = translate(mat4(1.0f), vec3(-0.8f, 8.0f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag3)
    {
        modelWorldMatrix = grand_parent * parentG * G5;
    }
    else
    {
        modelWorldMatrix = parentG * G5;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * G5;
    }

    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[3]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 G6 = translate(mat4(1.0f), vec3(-0.5f, 8.7f, 0)) * rotate(mat4(1.0f), radians(45.0f), vec3(0, 0, 1.0f)) * scale(mat4(1.0f), vec3(1.0f, 0.5f, 0.25f));
    if (flag3)
    {
        modelWorldMatrix = grand_parent * parentG * G6;
    }
    else
    {
        modelWorldMatrix = parentG * G6;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * G6;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[3]));
    glDrawArrays(rendertype0, 10, 36);

    mat4 G7 = translate(mat4(1.0f), vec3(0, 8.8f, 0)) * scale(mat4(1.0f), vec3(1.0f, 0.5f, 0.25f));
    if (flag3)
    {
        modelWorldMatrix = grand_parent * parentG * G7;
    }
    else
    {
        modelWorldMatrix = parentG * G7;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * G7;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[3]));
    glDrawArrays(rendertype0, 10, 36);

    //Draw J
    mat4 parentJ = translate(mat4(1.0f), vec3(X4, 0.0f, Z4)) * rotate(mat4(1.0f), radians(Angle4), vec3(0.0f, 1.0, 0.0f)) * scale(mat4(1.0f), vec3(zoom_size4));

    mat4 J1 = translate(mat4(1.0f), vec3(0.0f, 10.0f, 0)) * scale(mat4(1.0f), vec3(1.0f, 0.5f, 0.25f));
    if (status[4])
    {
        if (flag4)
        {
            modelWorldMatrix = grand_parent * parentJ * J1;
        }
        else
        {
            modelWorldMatrix = parentJ * J1;
        }
    }
    else
    {
        modelWorldMatrix = parentJ * J1;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * J1;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[4]));
    glDrawArrays(rendertype0, 10, 36);

    mat4 J2 = translate(mat4(1.0f), vec3(-0.5f, 10.5f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag4)
    {
        modelWorldMatrix = grand_parent * parentJ * J2;
    }
    else
    {
        modelWorldMatrix = parentJ * J2;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * J2;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[4]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 J3 = translate(mat4(1.0f), vec3(0.5f, 10.5f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag4)
    {
        modelWorldMatrix = grand_parent * parentJ * J3;
    }
    else
    {
        modelWorldMatrix = parentJ * J3;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * J3;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[4]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 J4 = translate(mat4(1.0f), vec3(0.5f, 11.5f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag4)
    {
        modelWorldMatrix = grand_parent * parentJ * J4;
    }
    else
    {
        modelWorldMatrix = parentJ * J4;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * J4;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[4]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 J5 = translate(mat4(1.0f), vec3(0.5f, 12.5f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag4)
    {
        modelWorldMatrix = grand_parent * parentJ * J5;
    }
    else
    {
        modelWorldMatrix = parentJ * J5;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * J5;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[4]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 J6 = translate(mat4(1.0f), vec3(0.5f, 13.0f, 0)) * scale(mat4(1.0f), vec3(1.0f, 0.5f, 0.25f));
    if (flag4)
    {
        modelWorldMatrix = grand_parent * parentJ * J6;
    }
    else
    {
        modelWorldMatrix = parentJ * J6;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * J6;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[4]));
    glDrawArrays(rendertype0, 10, 36);
    

    //Draw I
    mat4 parentI = translate(mat4(1.0f), vec3(X5, 0.0f, Z5)) * rotate(mat4(1.0f), radians(Angle5), vec3(0.0f, 1.0, 0.0f)) * scale(mat4(1.0f), vec3(zoom_size5));

    mat4 I1 = translate(mat4(1.0f), vec3(0.0f, 13.7f, 0)) * scale(mat4(1.0f), vec3(1.0f, 0.5f, 0.25f));
    if (status[5]) 
    {
        if (flag5)
        {
            modelWorldMatrix = grand_parent * parentI * I1;
        }
        else
        {
            modelWorldMatrix = parentI * I1;
        }
    }
    else
    {
        modelWorldMatrix = parentI * I1;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * I1;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[5]));
    glDrawArrays(rendertype0, 10, 36);
    
    mat4 I2 = translate(mat4(1.0f), vec3(0, 14.4f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag5)
    {
        modelWorldMatrix = grand_parent * parentI * I2;
    }
    else
    {
        modelWorldMatrix = parentI * I2;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * I2;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[5]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 I3 = translate(mat4(1.0f), vec3(0, 15.4f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag5)
    {
        modelWorldMatrix = grand_parent * parentI * I3;
    }
    else
    {
        modelWorldMatrix = parentI * I3;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * I3;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[5]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 I4 = translate(mat4(1.0f), vec3(0, 16.4f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag5)
    {
        modelWorldMatrix = grand_parent * parentI * I4;
    }
    else
    {
        modelWorldMatrix = parentI * I4;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * I4;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[5]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 I5 = translate(mat4(1.0f), vec3(0.0f, 17.1f, 0)) * scale(mat4(1.0f), vec3(1.0f, 0.5f, 0.25f));
    if (flag5)
    {
        modelWorldMatrix = grand_parent * parentI * I5;
    }
    else
    {
        modelWorldMatrix = parentI * I5;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * I5;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[5]));
    glDrawArrays(rendertype0, 10, 36);

    mat4 parentUL = translate(mat4(1.0f), vec3(X6 + 4.0f, 0.0f, Z6)) * rotate(mat4(1.0f), radians(Angle6), vec3(0.0f, 1.0, 0.0f)) * scale(mat4(1.0f), vec3(zoom_size6));
    mat4 parentUR = translate(mat4(1.0f), vec3(X7 - 4.0f, 0.0f, Z7)) * rotate(mat4(1.0f), radians(Angle7), vec3(0.0f, 1.0, 0.0f)) * scale(mat4(1.0f), vec3(zoom_size7));
   
    mat4 UL1 = translate(mat4(1.0f), vec3(11.0f, 14.5f, 0)) * scale(mat4(1.0f), vec3(1.0f, 0.5f, 0.25f));
    if (status[6]) 
    {
        if (flag6)
        {
            modelWorldMatrix = grand_parent * parentUL * UL1;
        }
        else
        {
            modelWorldMatrix = parentUL * UL1;
        }
    }
    else
    {
        modelWorldMatrix = parentUL * UL1;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * UL1;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[6]));
    glDrawArrays(rendertype0, 10, 36);

    mat4 UL2 = translate(mat4(1.0f), vec3(12.0f, 14.5f, 0)) * scale(mat4(1.0f), vec3(1.0f, 0.5f, 0.25f));
    if (flag6)
    {
        modelWorldMatrix = grand_parent * parentUL * UL2;
    }
    else
    {
        modelWorldMatrix = parentUL * UL2;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * UL2;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[6]));
    glDrawArrays(rendertype0, 10, 36);

    mat4 UL3 = translate(mat4(1.0f), vec3(12.5f, 14.5f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag6)
    {
        modelWorldMatrix = grand_parent * parentUL * UL3;
    }
    else
    {
        modelWorldMatrix = parentUL * UL3;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * UL3;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[6]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 UL4 = translate(mat4(1.0f), vec3(12.5f, 15.5f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag6)
    {
        modelWorldMatrix = grand_parent * parentUL * UL4;
    }
    else
    {
        modelWorldMatrix = parentUL * UL4;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * UL4;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[6]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 UL5 = translate(mat4(1.0f), vec3(12.5f, 16.5f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag6)
    {
        modelWorldMatrix = grand_parent * parentUL * UL5;
    }
    else
    {
        modelWorldMatrix = parentUL * UL5;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * UL5;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[6]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 UL6 = translate(mat4(1.0f), vec3(10.5f, 16.5f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag6)
    {
        modelWorldMatrix = grand_parent * parentUL * UL6;
    }
    else
    {
        modelWorldMatrix = parentUL * UL6;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * UL6;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[6]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 UL7 = translate(mat4(1.0f), vec3(10.5f, 15.5f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag6)
    {
        modelWorldMatrix = grand_parent * parentUL * UL7;
    }
    else
    {
        modelWorldMatrix = parentUL * UL7;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * UL7;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[6]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 UL8 = translate(mat4(1.0f), vec3(10.5f, 14.5f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag6)
    {
        modelWorldMatrix = grand_parent * parentUL * UL8;
    }
    else
    {
        modelWorldMatrix = parentUL * UL8;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * UL8;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[6]));
    glDrawArrays(rendertype1, 47, 1260);

    //
    mat4 UR1 = translate(mat4(1.0f), vec3(-11.0f, 14.5f, 0)) * scale(mat4(1.0f), vec3(1.0f, 0.5f, 0.25f));
    
    if (status[7]) 
    {
        if (flag7)
        {
            modelWorldMatrix = grand_parent * parentUR * UR1;
        }
        else
        {
            modelWorldMatrix = parentUR * UR1;
        }
    }
    else
    {
        modelWorldMatrix = parentUR * UR1;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * UR1;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[7]));
    glDrawArrays(rendertype0, 10, 36);

    mat4 UR2 = translate(mat4(1.0f), vec3(-12.0f, 14.5f, 0)) * scale(mat4(1.0f), vec3(1.0f, 0.5f, 0.25f));
    if (flag7)
    {
        modelWorldMatrix = grand_parent * parentUR * UR2;
    }
    else
    {
        modelWorldMatrix = parentUR * UR2;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * UR2;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[7]));
    glDrawArrays(rendertype0, 10, 36);

    mat4 UR3 = translate(mat4(1.0f), vec3(-12.5f, 14.5f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag7)
    {
        modelWorldMatrix = grand_parent * parentUR * UR3;
    }
    else
    {
        modelWorldMatrix = parentUR * UR3;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * UR3;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[7]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 UR4 = translate(mat4(1.0f), vec3(-12.5f, 15.5f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag7)
    {
        modelWorldMatrix = grand_parent * parentUR * UR4;
    }
    else
    {
        modelWorldMatrix = parentUR * UR4;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * UR4;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[7]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 UR5 = translate(mat4(1.0f), vec3(-12.5f, 16.5f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag7)
    {
        modelWorldMatrix = grand_parent * parentUR * UR5;
    }
    else
    {
        modelWorldMatrix = parentUR * UR5;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * UR5;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[7]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 UR6 = translate(mat4(1.0f), vec3(-10.5f, 16.5f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag7)
    {
        modelWorldMatrix = grand_parent * parentUR * UR6;
    }
    else
    {
        modelWorldMatrix = parentUR * UR6;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * UR6;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[7]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 UR7 = translate(mat4(1.0f), vec3(-10.5f, 15.5f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag7)
    {
        modelWorldMatrix = grand_parent * parentUR * UR7;
    }
    else
    {
        modelWorldMatrix = parentUR * UR7;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * UR7;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[7]));
    glDrawArrays(rendertype1, 47, 1260);

    mat4 UR8 = translate(mat4(1.0f), vec3(-10.5f, 14.5f, 0)) * scale(mat4(1.0f), vec3(0.5f)) * scale(mat4(1.0f), vec3(0.5f, 1.0f, 0.25f));
    if (flag7)
    {
        modelWorldMatrix = grand_parent * parentUR * UR8;
    }
    else
    {
        modelWorldMatrix = parentUR * UR8;
    }
    if (whole)
    {
        modelWorldMatrix = grand_parent * UR8;
    }
    glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &modelWorldMatrix[0][0]);
    glUniform3fv(colorLocation, 1, value_ptr(colors[7]));
    glDrawArrays(rendertype1, 47, 1260);
}


glm::vec3 cameraPos = glm::vec3(0.0f, 10.0f, 70.0f);
glm::vec3 cameraFront = glm::vec3(0.0f, 0.0f, -1.0f);
glm::vec3 cameraUp = glm::vec3(0.0f, 1.0f, 0.0f);

GLfloat Yaw = -90.0f;	// Yaw is initialized to -90.0 degrees since a yaw of 0.0 results in a direction vector pointing to the right (due to how Eular angles work) so we initially rotate a bit to the left.
GLfloat Pitch = 0.0f;
GLfloat lastX = Width / 2.0;
GLfloat lastY = Height / 2.0;
GLfloat fov = 45.0f;
bool keys[1024];

GLfloat dt = 0.0f;	// Time between current frame and last frame
GLfloat lastFrame = 0.0f;


int main(int argc, char* argv[])
{
    // Initialize GLFW and OpenGL version
    glfwInit();

#if defined(PLATFORM_OSX)
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 2);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#else
    // On windows, we set OpenGL version to 2.1, to support more hardware
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);
#endif

    // Create Window and rendering context using GLFW, resolution is 1024 * 768
    GLFWwindow* window = glfwCreateWindow(Width, Height, "Comp371 - PA1", NULL, NULL);
    if (window == NULL)
    {
        std::cerr << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    //Disable mouse cursor
    glfwSetKeyCallback(window, key_callback);
    glfwSetCursorPosCallback(window, mouse_callback);
    glfwSetScrollCallback(window, scroll_callback);

    glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

    // Initialize GLEW
    glewExperimental = true; // Needed for core profile
    if (glewInit() != GLEW_OK) {
        std::cerr << "Failed to create GLEW" << std::endl;
        glfwTerminate();
        return -1;
    }

    // Black background
    glClearColor(0.0f, 1.0f, 1.0f, 1.0f);

    // Compile and link shaders here ...
    int shaderProgram = compileAndLinkShaders();

    // We can set the shader once, since we have only one
    glUseProgram(shaderProgram);
    // Camera parameters for view transform
 
    // Set projection matrix for shader, this won't change
  
    float cameraHorizontalAngle = 90.0f;
    float cameraVerticalAngle = 0.0f;

    // Define and upload geometry to the GPU here ...
    int vbo = createVAO();
    GLuint colorLocation = glGetUniformLocation(shaderProgram, "objectColor");
   
    int lastMouseLeftState = GLFW_RELEASE;
    //Recorded mouse position before the engine.
    double lastX, lastY;
    glfwGetCursorPos(window, &lastX, &lastY);

    glEnable(GL_CULL_FACE);
    glEnable(GL_DEPTH_TEST);
    float angle = 0.0;
    float x = 0.0;
    float z = 64.0f;
    // Entering Main Loop
    while (!glfwWindowShouldClose(window))
    {
        glfwGetCursorPos(window, &lastX, &lastY);
        // Frame time calculation
        GLfloat currentFrame = glfwGetTime();
        dt = currentFrame - lastFrame;
        lastFrame = currentFrame;
        angle += 45.0f * dt;


        mat4 projectionMatrix = glm::perspective(fov,            // field of view in degrees
            (float)Width / (float)Height,  // aspect ratio
            0.1f, 200.0f);   // near and far (near > 0)

        GLuint projectionMatrixLocation = glGetUniformLocation(shaderProgram, "projectionMatrix");
        glUniformMatrix4fv(projectionMatrixLocation, 1, GL_FALSE, &projectionMatrix[0][0]);

        // Set initial view matrix
        mat4 viewMatrix = lookAt(cameraPos,  // eye
             cameraPos+cameraFront,  // center
            cameraUp); // up
        

        GLuint viewMatrixLocation = glGetUniformLocation(shaderProgram, "viewMatrix");
        glUniformMatrix4fv(viewMatrixLocation, 1, GL_FALSE, &viewMatrix[0][0]);

        mat4 orientationMatrix = rotate(mat4(1.0f), radians(worldX), vec3(1.0f, 0.0f, 0.0f)) * rotate(mat4(1.0f), radians(worldY), vec3(0.0f, 1.0f, 0.0f));
        GLuint worldorientationLocation = glGetUniformLocation(shaderProgram, "orientationMatrix");
        glUniformMatrix4fv(worldorientationLocation, 1, GL_FALSE, &orientationMatrix[0][0]);


        //Clear Depth Buffer Bit as well
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);


        GLuint worldMatrixLocation = glGetUniformLocation(shaderProgram, "worldMatrix");
        
        glBindBuffer(GL_ARRAY_BUFFER, vbo);

        

        drawGrid(worldMatrixLocation,colorLocation);

        drawAxis(worldMatrixLocation, colorLocation);
      
        // draw grid ground and axis

        /*mat4 scallingSphereO = scale(mat4(1.0f), vec3(3.0f, 3.0f, 3.0f));
        mat4 trasnslationSphereO = translate(mat4(1.0f), vec3(0.0f, 2.0f, 0.0f));
        mat4 worldSphereO = trasnslationSphereO * scallingSphereO;
        glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &worldSphereO[0][0]);
        glUniform3fv(colorLocation, 1, value_ptr(vec3(0.7f, 0.2f, 0.5f)));
        glDrawArrays(GL_TRIANGLE_STRIP, 47, 1260);*/
        // draw all models

        //drawZD43(worldMatrixLocation, window, coor0, status, Angle0);
        //drawSN44(worldMatrixLocation, window, coor1, status, Angle1);
        //drawYO48(worldMatrixLocation, window, coor2, status, Angle2);
        //drawNK46(worldMatrixLocation, window, coor3, status, Angle3);
        //drawJN46(worldMatrixLocation, window, coor4, status, Angle4);
        drawQuiz(worldMatrixLocation,colorLocation,x,64.0,angle);
        // End Frame
        glfwSwapBuffers(window);
        do_movement();
        glfwPollEvents();

        // Handle inputs
        if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
            glfwSetWindowShouldClose(window, true);

        if (glfwGetKey(window, GLFW_KEY_1) == GLFW_PRESS) // move camera down
        {
            //   vec3 cameraPosition(0.0f, 2.0f, -10.0f);
            //   vec3 cameraLookAt(vec3(cosf(0)* cosf(radians(-90.0f)), sinf(0), -cosf(0) * sinf(radians(-150.0f))));
            //   vec3 cameraUp(0.0f, 1.0f, 0.0f);
            
            cameraPos = { 0.0f, 2.0f, 69.0f };
            cameraFront = (vec3(0.0f, 0.0f, -1.0f));
            cameraUp = { 0.0f, 1.0f, 0.0f };
            whole = false;
            for (int i = 0; i < 8; i++)
            {
                status[i] = false;
            }
            status[0] = true;
            flag1 = false;
            flag2 = false;
            flag3 = false;
            flag4 = false;
            flag5 = false;
            flag6 = false;
            flag7 = false;

        }

        if (glfwGetKey(window, GLFW_KEY_2) == GLFW_PRESS) // move camera down
        {
            cameraPos = { 0.0f, 3.0f, 69.0f };
            cameraFront = (vec3(0.0f, 0.0f, -1.0f)); 
            cameraUp = { 0.0f, 1.0f, 0.0f };
            whole = false;
            for (int i = 0; i < 8; i++)
            {
                status[i] = false;
            }
            status[1] = true;
            flag0 = false;
            flag2 = false;
            flag3 = false;
            flag4 = false;
            flag5 = false;
            flag6 = false;
            flag7 = false;

        }

        if (glfwGetKey(window, GLFW_KEY_3) == GLFW_PRESS) // move camera down
        {

            cameraPos = { 0.0f, 6.0f, 69.0f };
            cameraFront = (vec3(0.0f, 0.0f, -1.0f)); 
            cameraUp = { 0.0f, 1.0f, 0.0f };
            whole = false;
            for (int i = 0; i < 8; i++)
            {
                status[i] = false;
            }
            status[2] = true;
            flag1 = false;
            flag0 = false;
            flag3 = false;
            flag4 = false;
            flag5 = false;
            flag6 = false;
            flag7 = false;
        }

        if (glfwGetKey(window, GLFW_KEY_4) == GLFW_PRESS) // move camera down
        {

            cameraPos = { 0.0f, 9.0f, 69.0f };
            cameraFront = (vec3(0.0f, 0.0f, -1.0f)); 
            cameraUp = { 0.0f, 1.0f, 0.0f };
            whole = false;
            for (int i = 0; i < 8; i++)
            {
                status[i] = false;
            }

            status[3] = true;
            flag1 = false;
            flag2 = false;
            flag0 = false;
            flag4 = false;
            flag5 = false;
            flag6 = false;
            flag7 = false;
        }

        if (glfwGetKey(window, GLFW_KEY_5) == GLFW_PRESS) // move camera down
        {

            cameraPos = { 0.0f, 12.0f, 69.0f };
            cameraFront = (vec3(0.0f, 0.0f, -1.0f)); 
            cameraUp = { 0.0f, 1.0f, 0.0f };
            whole = false;
            for (int i = 0; i < 8; i++)
            {
                status[i] = false;
            }
            status[4] = true;
            flag1 = false;
            flag2 = false;
            flag3 = false;
            flag0 = false;
            flag5 = false;
            flag6 = false;
            flag7 = false;
        }
        if (glfwGetKey(window, GLFW_KEY_6) == GLFW_PRESS) // move camera down
        {

            cameraPos = { 0.0f, 15.0f, 69.0f };
            cameraFront = (vec3(0.0f, 0.0f, -1.0f)); 
            cameraUp = { 0.0f, 1.0f, 0.0f };
            whole = false;
            for (int i = 0; i < 8; i++)
            {
                status[i] = false;
            }
            status[5] = true;
            flag1 = false;
            flag2 = false;
            flag3 = false;
            flag4 = false;
            flag0 = false;
            flag6 = false;
            flag7 = false;
        }
        if (glfwGetKey(window, GLFW_KEY_7) == GLFW_PRESS) // move camera down
        {

            cameraPos = { 15.3f, 15.0f, 69.0f };
            cameraFront = (vec3(0.0f, 0.0f, -1.0f)); 
            cameraUp = { 0.0f, 1.0f, 0.0f };
            whole = false;
            for (int i = 0; i < 8; i++)
            {
                status[i] = false;
            }
            status[6] = true;
            flag1 = false;
            flag2 = false;
            flag3 = false;
            flag4 = false;
            flag5 = false;
            flag0 = false;
            flag7 = false;
        }
        if (glfwGetKey(window, GLFW_KEY_8) == GLFW_PRESS) // move camera down
        {

            cameraPos = { -15.3f, 15.0f, 69.0f };
            cameraFront = (vec3(0.0f, 0.0f, -1.0f)); 
            cameraUp = { 0.0f, 1.0f, 0.0f };
            whole = false;
            for (int i = 0; i < 8; i++)
            {
                status[i] = false;
            }
            status[7] = true;
            flag1 = false;
            flag2 = false;
            flag3 = false;
            flag4 = false;
            flag5 = false;
            flag6 = false;
            flag0 = false;
        }

        if (glfwGetKey(window, GLFW_KEY_U) == GLFW_PRESS)
        {
            if (status[0])
            {
                zoom_size0 += 0.01;
            }
            if (status[1])
            {
                zoom_size1 += 0.01;
            }
            if (status[2])
            {
                zoom_size2 += 0.01;
            }
            if (status[3])
            {
                zoom_size3 += 0.01;
            }

            if (status[4])
            {
                zoom_size4 += 0.01;
            }
            if (status[5])
            {
                zoom_size5 += 0.01;
            }

            if (status[6])
            {
                zoom_size6 += 0.01;
            }

            if (status[7]) 
            {
                zoom_size7 += 0.01;
            }

            if (whole) 
            {
                zoom_size8 += 0.01;
            }

        }
        if (glfwGetKey(window, GLFW_KEY_J) == GLFW_PRESS)
        {
            if (status[0])
            {
                zoom_size0 -= 0.01;
            }
            if (status[1])
            {
                zoom_size1 -= 0.01;
            }
            if (status[2])
            {
                zoom_size2 -= 0.01;
            }
            if (status[3])
            {
                zoom_size3 -= 0.01;
            }

            if (status[4])
            {
                zoom_size4 -= 0.01;
            }

            if (status[5])
            {
                zoom_size5 -= 0.01;
            }

            if (status[6])
            {
                zoom_size6 -= 0.01;
            }
            if (status[7])
            {
                zoom_size7 -= 0.01;
            }

            if (whole)
            {
                zoom_size8 -= 0.01;
            }


        }
        if (glfwGetKey(window, GLFW_KEY_P) == GLFW_PRESS)
        {
          
                rendertype0 = GL_POINTS;
           
                rendertype1 = GL_POINTS;
            
          
        }
        if (glfwGetKey(window, GLFW_KEY_L) == GLFW_PRESS)
        {
           
                rendertype0 = GL_LINE_LOOP;
            
                rendertype1 = GL_LINE_LOOP;
          
    
        }
        if (glfwGetKey(window, GLFW_KEY_T) == GLFW_PRESS)
        {
           
                rendertype0 = GL_TRIANGLES;
       
           
                rendertype1 = GL_TRIANGLES;
          

        }
        if (glfwGetKey(window, GLFW_KEY_O) == GLFW_PRESS)
        {
            if (status[0])
            {
                flag0=true;
                flag1 = false;
                flag2 = false;
                flag3 = false;
                flag4 = false;
                flag5 = false;
                flag6 = false;
                flag7 = false;
            }
            if (status[1])
            {
                flag1=true;
                flag0 = false;
                flag2 = false;
                flag3 = false;
                flag4 = false;
                flag5 = false;
                flag6 = false;
                flag7 = false;
              
            }
            if (status[2])
            {
                flag2=true;
                flag1 = false;
                flag0 = false;
                flag3 = false;
                flag4 = false;
                flag5 = false;
                flag6 = false;
                flag7 = false;
             
            }
            if (status[3])
            {
                flag3 = true;
                flag1 = false;
                flag2 = false;
                flag0 = false;
                flag4 = false;
                flag5 = false;
                flag6 = false;
                flag7 = false;
 
            }

            if (status[4])
            {
                flag4 = true;  
                flag1 = false;
                flag2 = false;
                flag3 = false;
                flag0 = false;
                flag5 = false;
                flag6 = false;
                flag7 = false;
            }

            if (status[5])
            {
                flag5 = true;
                flag1 = false;
                flag2 = false;
                flag3 = false;
                flag4 = false;
                flag0 = false;
                flag6 = false;
                flag7 = false;
            }
            if (status[6])
            {
                flag6 = true;
                flag1 = false;
                flag2 = false;
                flag3 = false;
                flag4 = false;
                flag5 = false;
                flag0 = false;
                flag7 = false;
            }
            if (status[7])
            {
                flag7 = true;
                flag1 = false;
                flag2 = false;
                flag3 = false;
                flag4 = false;
                flag5 = false;
                flag6 = false;
                flag0 = false;
            }

            
            
        }
        if (glfwGetKey(window, GLFW_KEY_Y) == GLFW_PRESS)
        {
             flag0 = false;
             flag1 = false;
             flag2 = false;
             flag3 = false;
             flag4 = false;
             flag5 = false;
             flag6 = false;
             flag7 = false;
             
        }
        if (glfwGetKey(window, GLFW_KEY_I) == GLFW_PRESS)
        {
            whole = true;
            cameraPos = { 0.0f, 10.0f, 100.0f };
            cameraFront = (vec3(0.0f, 0.0f, -1.0f)); 
            cameraUp = { 0.0f, 1.0f, 0.0f };
           
        }
       



        //Reset to initial postion, include camera, model, and variables.
        if (glfwGetKey(window, GLFW_KEY_HOME) == GLFW_PRESS)
        {
            cameraPos = { 0.0f, 10.0f, 70.0f };
            cameraFront = (vec3(0,0,-1.0f));

            worldX = 0;
            worldY = 0;
            orientationMatrix = mat4(1.0f);
            rendertype0 = GL_TRIANGLES;
            rendertype1 = GL_TRIANGLE_STRIP;
         
           zoom_size0 = 1.0;                //Scale coefficients of different models, because they are distinct, one scale won't influence others.
           zoom_size1 = 1.0;
           zoom_size2 = 1.0;
           zoom_size3 = 1.0;
           zoom_size4 = 1.0;
           zoom_size5 = 1.0;
           zoom_size6 = 1.0;
           zoom_size7 = 1.0;
           zoom_size8 = 1.0;

            Angle0 = 0.0f;                   //Rotation coefficients of different models, because they are distinct, one rotation won't influence others.
            Angle1 = 0.0f;
            Angle2 = 0.0f;
            Angle3 = 0.0f;
            Angle4 = 0.0f;
            Angle5 = 0.0f;
            Angle6 = 0.0f;
            Angle7 = 0.0f;
            Angle8 = 0.0f;


           X0 = 0.0f;Z0 = 64.0f;
           X1 = 0.0f;Z1 = 64.0f;
           X2 = 0.0f;Z2 = 64.0f;
           X3 = 0.0f;Z3 = 64.0f;
           X4 = 0.0f;Z4 = 64.0f;
           X5 = 0.0f;Z5 = 64.0f;
           X6 = 0.0f;Z6 = 64.0f;
           X7 = 0.0f;Z7 = 64.0f;
           X8 = 0.0f;Z8 = 64.0f;


           flag0 = false;                    //Flags are used to record if button are pressed and if other button it won't changed state until pressing home button.
           flag1 = false;
           flag2 = false;
           flag3 = false;
           flag4 = false;
           flag5 = false;
           flag6 = false;
           flag7 = false;


        }





        if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
        {
            if (whole) {
                if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
                {
                    Angle8 += 5 * dt;
                }
                else
                {
                    X8 -= 0.1f;
                }
            }
            if (status[0])
            {
                if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
                {
                    Angle0 += 5 * dt;
                }
                else {

                    X0 -= 0.1f;
                }

            }
            if (status[1])
            {
                if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
                {
                    Angle1 += 5 * dt;
                }
                else {

                    X1 -= 0.1f;
                }

            }
            if (status[2])
            {
                if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
                {
                    Angle2 += 5 * dt;
                }
                else {

                    X2 -= 0.1f;
                }

            }
            if (status[3])
            {
                if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
                {
                    Angle3 += 5 * dt;
                }
                else {

                    X3 -= 0.1f;
                }

            }

            if (status[4])
            {
                if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
                {
                    Angle4 += 5 * dt;
                }
                else {

                    X4 -= 0.1f;
                }

            }
            if (status[5])
            {
                if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
                {
                    Angle5 += 5 * dt;
                }
                else {

                    X5 -= 0.1f;
                }

            }
            if (status[6])
            {
                if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
                {
                    Angle6 += 5 * dt;
                }
                else {

                    X6 -= 0.1f;
                }

            }
            if (status[7])
            {
                if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
                {
                    Angle7 += 5 * dt;
                }
                else {

                    X7 -= 0.1f;
                }

            }
            
        }

        

        if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
        {

            if (whole) {
                if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
                {
                    Angle8 -= 5 * dt;
                }
                else
                {
                    X8 += 0.1f;
                }
            }
            if (status[0])
            {
                if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
                {
                    Angle0 -= 5 * dt;
                }
                else {

                    X0 += 0.1f;
                }

            }
            if (status[1])
            {
                if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
                {
                    Angle1 -= 5 * dt;
                }
                else {

                    X1 += 0.1f;
                }

            }
            if (status[2])
            {
                if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
                {
                    Angle2 -= 5 * dt;
                }
                else {
                    X2 += 0.1f;
                }

            }
            if (status[3])
            {
                if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
                {
                    Angle3 -= 5 * dt;
                }
                else {

                    X3 += 0.1f;
                }

            }

            if (status[4])
            {
                if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
                {
                    Angle4 -= 5 * dt;
                }
                else {

                    X4 += 0.1f;
                }

            }

            if (status[5])
            {
                if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
                {
                    Angle5 -= 5 * dt;
                }
                else {

                    X5 += 0.1f;
                }

            }

            if (status[6])
            {
                if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
                {
                    Angle6 -= 5 * dt;
                }
                else {

                    X6 += 0.1f;
                }

            }if (status[7])
            {
                if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
                {
                    Angle7 -= 5 * dt;
                }
                else {

                    X7 += 0.1f;
                }

            }
        }

        if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
        {
            if (status[0])
            {
                Z0 -= 0.1f;
            }
            if (status[1])
            {
                Z1 -= 0.1f;
            }
            if (status[2])
            {
                Z2 -= 0.1f;
            }
            if (status[3])
            {
                Z3 -= 0.1f;
            }

            if (status[4])
            {
                Z4 -= 0.1f;

            }
            if (status[5])
            {
                Z5 -= 0.1f;

            }
            if (status[6])
            {
                Z6 -= 0.1f;

            }
            if (status[7])
            {
                Z7 -= 0.1f;

            }
            if (whole)
            {
                Z8 -= 0.1f;
            }
            
        }

        if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
        {
            if (status[0])
            {
                Z0 += 0.1f;
            }
            if (status[1])
            {
                Z1 += 0.1f;
            }
            if (status[2])
            {
                Z2 += 0.1f;
            }
            if (status[3])
            {
                Z3 += 0.1f;
            }

            if (status[4])
            {
                Z4 += 0.1f;

            }
            if (status[5])
            {
                Z5 += 0.1f;

            }
            if (status[6])
            {
                Z6 += 0.1f;

            }
            if (status[7])
            {
                Z7 += 0.1f;

            }
            if (whole)
            {
                Z8 += 0.1f;
            }
        }

       /* if (glfwGetMouseButton(window, GLFW_KEY_LEFT) == GLFW_PRESS) {
            double posX, posY;
            glfwGetCursorPos(window, &posX, &posY);

            float deltaY = posY - lastY;

            lastY = posY;

            cameraPosition.x += deltaY * 0.01;
        }

        if (glfwGetMouseButton(window, GLFW_KEY_RIGHT) == GLFW_PRESS) {
            double posX, posY;
            glfwGetCursorPos(window, &posX, &posY);

            float deltaX = posX - lastX;

            lastX = posX;

            cameraPosition.z += deltaX * 0.01;
        }

        if (glfwGetMouseButton(window, GLFW_KEY_UP) == GLFW_PRESS) {
            double posX, posY;
            glfwGetCursorPos(window, &posX, &posY);

            float deltaY = posY - lastY;

            lastY = posY;

            cam.y += deltaY * 0.01;
        }*/

    /*    if ((glfwGetKey(window, GLFW_KEY_LEFT)) == GLFW_PRESS)
        {
            worldX -= 0.5f;
            orientationMatrix = rotate(mat4(1.0f), radians(worldX), vec3(1.0f, 0.0f, 0.0f)) * rotate(mat4(1.0f), radians(worldY), vec3(0.0f, 1.0f, 0.0f));
        }
        if ((glfwGetKey(window, GLFW_KEY_RIGHT)) == GLFW_PRESS)
        {
            worldX += 0.5f;
            orientationMatrix = rotate(mat4(1.0f), radians(worldX), vec3(1.0f, 0.0f, 0.0f)) * rotate(mat4(1.0f), radians(worldY), vec3(0.0f, 1.0f, 0.0f));
        }
        if ((glfwGetKey(window, GLFW_KEY_UP)) == GLFW_PRESS)
        {
            worldY += 0.5f;
            orientationMatrix = rotate(mat4(1.0f), radians(worldX), vec3(1.0f, 0.0f, 0.0f)) * rotate(mat4(1.0f), radians(worldY), vec3(0.0f, 1.0f, 0.0f));
        }
        if ((glfwGetKey(window, GLFW_KEY_DOWN)) == GLFW_PRESS)
        {
            worldY -= 0.5f;
            orientationMatrix = rotate(mat4(1.0f), radians(worldX), vec3(1.0f, 0.0f, 0.0f)) * rotate(mat4(1.0f), radians(worldY), vec3(0.0f, 1.0f, 0.0f));
        }*/

        worldorientationLocation = glGetUniformLocation(shaderProgram, "orientationMatrix");
        glUniformMatrix4fv(worldorientationLocation, 1, GL_FALSE, &orientationMatrix[0][0]);


       
    }


    // Shutdown GLFW
    glfwTerminate();

    return 0;
}

void key_callback(GLFWwindow* window, int key, int scancode, int action, int mode)
{
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        glfwSetWindowShouldClose(window, GL_TRUE);
    if (key >= 0 && key < 1024)
    {
        if (action == GLFW_PRESS)
            keys[key] = true;
        else if (action == GLFW_RELEASE)
            keys[key] = false;
    }
}

void do_movement()
{
    // Camera controls
    GLfloat cameraSpeed = 10.0f * dt;
    if (keys[GLFW_KEY_UP])
        cameraPos += cameraSpeed * cameraFront;
    if (keys[GLFW_KEY_DOWN])
        cameraPos -= cameraSpeed * cameraFront;
    if (keys[GLFW_KEY_LEFT])
        cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
    if (keys[GLFW_KEY_RIGHT])
        cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
}

bool firstMouse = true;
void mouse_callback(GLFWwindow* window, double xpos, double ypos)
{
    if (firstMouse)
    {
        lastX = xpos;
        lastY = ypos;
        firstMouse = false;
    }

    GLfloat xoffset = xpos - lastX;
    GLfloat yoffset = lastY - ypos; // Reversed since y-coordinates go from bottom to left
    lastX = xpos;
    lastY = ypos;

    GLfloat sensitivity = 0.05;	// Change this value to your liking
    xoffset *= sensitivity;
    yoffset *= sensitivity;

    Yaw += xoffset;
    Pitch += yoffset;

    // Make sure that when pitch is out of bounds, screen doesn't get flipped
    if (Pitch > 89.0f)
        Pitch = 89.0f;
    if (Pitch < -89.0f)
        Pitch = -89.0f;

    glm::vec3 front;
    front.x = cos(glm::radians(Yaw)) * cos(glm::radians(Pitch));
    front.y = sin(glm::radians(Pitch));
    front.z = sin(glm::radians(Yaw)) * cos(glm::radians(Pitch));
    cameraFront = glm::normalize(front);
}

void scroll_callback(GLFWwindow* window, double xoffset, double yoffset)
{
    if (fov >= 1.0f && fov <= 45.0f)
        fov -= yoffset;
    if (fov <= 1.0f)
        fov = 1.0f;
    if (fov >= 45.0f)
        fov = 45.0f;
}



